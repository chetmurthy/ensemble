#*************************************************************#
#
#   Ensemble, 1_42
#   Copyright 2003 Cornell University, Hebrew University
#           IBM Israel Science and Technology
#   All rights reserved.
#
#   See ensemble/doc/license.txt for further information.
#
#*************************************************************#
#*************************************************************#
#
# MAKEFILE: root Ensemble Makefile
#
# Author: Ohad Rodeh  12\2001
# Based on code by Mark Hayden
#
#*************************************************************#

.PHONY: socket tar hot ce maestro tools

!include mk\config.nmk
!include mk\preamble.nmk
!include mk\files.nmk

#*************************************************************#
# Choose whether to use the optimizing compiler or not.
#
!ifdef OPT
!include mk\ocamlopt.nmk
!else
!include mk\ocaml.nmk
!endif

#*************************************************************#
ENSROOT = .

INCLUDE =\
	-I socket -I util -I mm -I type -I infr -I route -I appl\
	-I trans -I groupd -I layers\trans -I layers\other 

!include mk\rules.nmk
#*************************************************************#


LIBS =\
	$(ENSLIB)\libenscore$(CMA)\
	$(ENSLIB)\libensmin$(CMA)\
	$(ENSLIB)\libensrest$(CMA)\
	$(ENSLIB)\ensemble$(CMI)\
	$(ENSLIB)\ensemble.mli 

#*************************************************************#

all : $(LIBS) 


# Call ourselves with the optimizing compiler switch
#
opt : 
	$(MAKE_BASE) -f Makefile.top.nt OPT=yes all

# Make and install Tk library
tk : libhtk$(CMA)
	$(CP) trans\htk$(CMI) $(ENSLIB)
	$(CP) trans\htk.mli $(ENSLIB)
	$(CP) libhtk$(CMA) $(ENSLIB)

#*************************************************************#
#
#Special tools

$(ENSBIN)\$(EMRG): tools\emrg.ml 
	ocamlc -c -I tools tools\emrg.ml 
	ocamlc -o $(ENSBIN)\$(EMRG) tools\emrg.cmo

#*************************************************************#
# Make libraries and global interface files.

$(ENSLIB)\libenscore$(CMA): $(ENSCOREOBJ)
	$(MLLIBR) -o $(ENSLIB)\libenscore$(CMA) -linkall $(ENSCOREOBJ)

$(ENSLIB)\libensmin$(CMA): $(ENSMINOBJ)
	$(MLLIBR) -o $(ENSLIB)\libensmin$(CMA) -linkall $(ENSMINOBJ)

$(ENSLIB)\libensrest$(CMA): $(ENSRESTOBJ)
	$(MLLIBR) -o $(ENSLIB)\libensrest$(CMA) -linkall $(ENSRESTOBJ)

libhtk$(CMA): trans\htk.ml trans\htk.mli
	$(ENSCOMP) -c -I $(ENSLIB) -I +labltk trans\htk.mli
	$(ENSCOMP) -c -I $(ENSLIB) -I +labltk trans\htk.ml
	$(MLLIBR) -o libhtk$(CMA) -linkall trans\htk$(CMO)

#*************************************************************#
# The obj\ensemble.ml* files are generated from exported .mli
# files

$(ENSLIB)\ensemble.mli: $(ENSLIB)\socket$(CMI) $(ENSEMBLEMLI) $(ENSBIN)\$(EMRG)
	$(RM) ensemble.mli
	$(ENSBIN)\$(EMRG) -mli $(ENSEMBLEMLI) -o $(ENSLIB)\ensemble.mli

$(ENSLIB)\ensemble.ml: socket\socket$(CMI) $(ENSEMBLEMLI) $(ENSBIN)\$(EMRG)
	$(RM) ensemble.ml
	$(ENSBIN)\$(EMRG) -ml $(ENSEMBLEMLI) -o $(ENSLIB)\ensemble.ml

$(ENSLIB)\ensemble$(CMI): $(ENSLIB)\ensemble.mli 
	$(ENSCOMP) -c $(ENSLIB)\ensemble.mli

$(ENSLIB)\ensemble$(CMO): $(ENSLIB)\ensemble$(CMI) $(ENSLIB)\ensemble.ml $(ENSLIB)\ensemble.mli 
	$(ENSCOMP) -c $(INCLUDE) $(ENSLIB)\ensemble.ml

#*************************************************************#

DEPENDS =\
	socket\socket.mli\
	appl\*.ml	appl\*.mli\
	crypto\*.ml 	crypto\*.mli\
	groupd\*.ml 	groupd\*.mli\
	infr\*.ml 	infr\*.mli\
	layers\*.ml 	layers\*.mli\
	layers\bypass\*.ml	layers\bypass\*.mli\
	layers\debug\*.ml	layers\debug\*.mli\
	layers\flow\*.ml	layers\flow\*.mli\
	layers\total\*.ml	layers\total\*.mli\
	layers\vsync\*.ml	layers\vsync\*.mli\
	layers\other\*.ml	layers\other\*.mli\
	layers\trans\*.ml	layers\trans\*.mli\
	layers\gossip\*.ml	layers\gossip\*.mli\
	layers\scale\*.ml	layers\scale\*.mli\
	layers\security\*.ml	layers\security\*.mli\
	mm\*.ml	mm\*.mli\
	route\*.ml	route\*.mli\
	trans\*.ml	trans\*.mli\
	type\*.ml	type\*.mli\
	util\*.ml	util\*.mli 

depend:
	ocamldep $(INCLUDE) -I crypto\OpenSSL -I crypto\isaac\
	$(DEPENDS) > $(DEPEND)

!include $(DEPEND)
#*************************************************************#

