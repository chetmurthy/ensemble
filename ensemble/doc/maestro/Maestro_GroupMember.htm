<!-- File: Maestro_GroupMember.htm -->
<!-- Author: Alexey Vaysburd -->
<!-- Contents: Group-Member Classes in Maestro --> 
<!-- Created: September 1995 -->
<!-- Updated:  Feb 1997 -->

<html>

<head>
<title>Maestro Open Toolkit:  Group Members</title>
<link rev="made" href="mailto:alexey@cs.cornell.edu (Alexey Vaysburd)">
</head>

<BODY TEXT="#000000" BGCOLOR="#FCD5AD" LINK="#0000FF" VLINK="#551A8B" ALINK="#FF0000">
<TABLE WIDTH="800" >
<TR>
<TD ALIGN=LEFT VALIGN=TOP WIDTH="100"><IMG SRC="maestro-logo.jpg" VSPACE=20 HSPACE=20 HEIGHT=105 WIDTH=70 ALIGN=LEFT></TD>

<TD WIDTH="500" BORDER="0">
<H1>Maestro Open Toolkit:  Group Members</H1>
</TD>
</TR>
</TABLE>

This document is a part of online 
<a href="http://www.cs.cornell.edu/Info/Projects/Ensemble/index.htm">
Ensemble</a> documentation, under
<a href="Maestro.htm">Maestro Open Toolkit</a>.
<hr>

<h2>
<a name="Maestro_GroupMember">Maestro_GroupMember</a>
</h2>

<p>
The <tt>Maestro_GroupMember</tt> class implements an abstract data type for
group members in the
<a href="http://www.cs.cornell.edu/Info/Projects/Ensemble/index.htm">
Ensemble system</a>. 
There are public downcalls 
for joining groups, sending messages, etc., and (protected) callbacks that are 
invoked when group events arive.  Typically an application will define a
subclass of the <tt>Maestro_GroupMember</tt> class, which will overload 
callbacks/downcalls of <tt>Maestro_GroupMember</tt> to implement 
application-specific functionality.

<p>
<h4>Code Example:</h4>
<li><a href="example.htm">
Using <tt>Maestro_GroupMember</tt></a>

<p>
<h4>Index of Topics:</h4>
<li><a href="#Starting_Ensemble">Starting Ensemble</a>
<li><a href="#Creating_Maestro_GroupMember_Objects">Creating <tt>Maestro_GroupMember</tt> Objects</a>
<li><a href="#Maestro_GroupMember_Joining_Group">Joining and leaving groups</a>
<li><a href="#Maestro_GroupMember_Sending_Messages">Sending and receiving messages</a>
<li><a href="#Maestro_GroupMember_Membership_Changes">Participating in membership changes</a>
<li><a href="#External_Failure_Detectors">Using external failure detectors</a>
<li><a href="#Changing_Protocol_Stacks">Changing protocol stacks</a>

<p>
<h4>Index of Downcalls/Callbacks:</h4>
<li><a href="#Starting_Ensemble"><tt>start</tt></a>
<li><a href="#Maestro_GroupMember_Joining_Group"><tt>join</tt></a>
<li><a href="#Maestro_GroupMember_Joining_Group"><tt>leave</tt></a>
<li><a href="#Maestro_GroupMember_Sending_Messages"><tt>send</tt></a>
<li><a href="#Maestro_GroupMember_Sending_Messages"><tt>cast</tt></a>
<li><a href="#External_Failure_Detectors"><tt>suspect</tt></a>
<li><a href="#Changing_Protocol_Stacks"><tt>changeProtocol</tt></a>
<li><a href="#Miscellaneous"><tt>requestNewView</tt></a>
<li><a href="#Miscellaneous"><tt>myEndpID</tt></a>
<li><a href="#Maestro_GroupMember_Sending_Messages"><tt>grpMemb_ReceiveCast_Callback</tt></a>
<li><a href="#Maestro_GroupMember_Sending_Messages"><tt>grpMemb_ReceiveSend_Callback</tt></a>
<li><a href="#Maestro_GroupMember_Membership_Changes"><tt>grpMemb_ViewMsg_Callback</tt></a>
<li><a href="#Maestro_GroupMember_Membership_Changes"><tt>grpMemb_AcceptedView_Callback</tt></a>

<!--
<li><a href="#Maestro_GroupMember_Membership_Changes"><tt>grpMemb_ChangingView_Callback</tt></a>
<li><a href="#Maestro_GroupMember_Membership_Changes"><tt>grpMemb_ProposeView_Callback</tt></a>
-->

<li><a href="#Maestro_GroupMember_Membership_Changes"><tt>grpMemb_Block_Callback</tt></a>
<li><a href="#Maestro_GroupMember_Joining_Group"><tt>grpMemb_Exit_Callback</tt></a>
<li><a href="#Miscellaneous"><tt>grpMemb_Heartbeat_Callback</tt></a>

<p>
<h4>
<a name="Creating_Maestro_GroupMember_Objects">
<hr>Creating Maestro_GroupMember Objects
</a>
</h4>

<p>
The <tt>Maestro_GroupMember</tt> class provides the following constructor:

<pre>	Maestro_GroupMember(Maestro_GrpMemb_Options &membOps);</pre>

Initialization parameters are specified with the <tt>membOps</tt> argument.
The <tt>Maestro_GrpMemb_Options</tt> structure contains the following fields:
	
<dir>
<li><tt>unsigned heartbeatRate</tt> -- The frequency of heartbeat callbacks, in milliseconds.

<li><tt>
<a href="Maestro_Types.htm#Maestro_String">Maestro_String</a> groupName</tt> 
-- The name of the group to be joined.

<li><tt>Maestro_String protocol</tt> -- The Ensemble protocol stack to be used.
Protocols in the stack are separated by colons, for example:
<br><tt>"Top:Heal:Switch:Leave:Inter:Intra:Elect:Merge:Sync:Suspect:Top_appl:Pt2pt:Frag:Stable:Mnak:Bottom"</tt>,  The use of raw protocol stacks is
discouraged.  Instead, protocol <em>properties</em> should be specified
(see below).

<li><tt>Maestro_String properties</tt> -- Group protocol properties required
by the application.  
The following properties are supported:
    
<dir>
  <li><tt>Agree</tt> -- Agreed (safe) delivery 
  <li><tt>Gmp</tt> -- Group-membership properties
  <li><tt>Sync</tt> -- View synchronization
  <li><tt>Total</tt> -- Totally ordered messages
  <li><tt>Heal</tt> -- Partition healing
  <li><tt>Switch</tt> -- Protocol switching
  <li><tt>Auth</tt> -- Authentication
  <li><tt>Causal</tt> -- Causally ordered broadcasts
  <li><tt>Subcast</tt> -- Subcast pt2pt messages
  <li><tt>Frag</tt> -- Fragmentation-reassembly
  <li><tt>Scale</tt> -- Scalability
  <li><tt>Suspect</tt> -- Failure detection
  <li><tt>Flow</tt> -- Flow control
  <li><tt>Migrate</tt> -- Process migration
  <li><tt>Privacy</tt> -- Encryption of application data
  <li><tt>Rekey</tt> -- Support for rekeying the group
  <li><tt>Primary</tt> -- Primary partition detection
</dir>

Properties are separated by colons, for example:
<tt>"Gmp:Sync:Heal:Switch:Suspect:Flow:Primary"</tt>.

  <li><tt>Maestro_String params</tt> -- Parameters for the group.

<li><tt>Maestro_String transports</tt> -- The list of available transport protocols.  Protocols in the
list are separated by colons, for example: <tt>"UDP:ATM"</tt>.

<li><tt>
<a href="Maestro_Types.htm#Maestro_ErrorHandler">Maestro_ErrorHandler</a> *errorHandler</tt> 
-- The error handler to be used by the group-member object.  
If <tt>errorHandlerset</tt> field is set to <tt>NULL</tt>, the default error handler is used.

<li><tt>int groupdFlag</tt> -- The flag should be set if
<a href="groupd.htm">Ensemble Membership Service</a>
is to be used.

<li><tt>int viewMsgFlag</tt> -- The flag should be set if view messages
are required, in which case the
<a href="#Maestro_GroupMember_Membership_Changes">
<tt>grpMemb_ViewMsg_Callback</tt>
</a> is invoked at the coordinator allowing it to distribute additional 
data to view members along with the view structure.

<li><tt>char **argv</tt> -- Command-line parameters.

</dir>

<p>
<h4>
<a name="Maestro_GroupMember_Joining_Group">
<hr>Joining and Leaving a Group
</a>
</h4>

A <tt>Maestro_GroupMember</tt> object does not automatically join the group
at the initialization time.  To join the group, the <tt>join()</tt> method
should be invoked:

<pre>	void join();</pre>

<li>A call to <tt>join()</tt> is eventually followed by an invocation of the
<tt>grpMemb_AcceptedView_Callback()</tt> by Ensemble.

<p>
<li>A call to <tt>join()</tt> returns only 
<em>after</em> the <tt>grpMemb_AcceptedView_Callback()</tt> method 
has been invoked by Ensemble.

<p>
<li>A member object cannot join multiple groups and cannot join a group more than once.  

<p>
<li>A member can leave the group by calling the <tt>leave()</tt> method:

<pre>	void leave():</pre>

After the member completes leaving the group, the 
<tt>grpMemb_Exit_Callback()</tt> method is invoked by Ensemble. 
<tt>grpMemb_Exit_Callback()</tt> is defined in the <tt>Maestro_GroupMember</tt> class
as a no-op function (to be overloaded in subclasses of 
<tt>Maestro_GroupMember</tt>):

<pre>	void grpMemb_Exit_Callback() {}</pre>

It is guaranteed that <tt>grpMemb_Exit_Callback()</tt> will be the last callback 
received by a group member.

<p>
<li>After a group member leaves the group, it can rejoin by calling the 
<tt>join()</tt> method again.

<p>
<li>A <tt>Maestro_GroupMember</tt> object leaves the
group automatically at the time of deallocation, by calling the 
<tt>leave()</tt> method from the destructor.

<p>
<h4>
<a name="Maestro_GroupMember_Sending_Messages">
<hr>Sending and Receiving Messages
</a>
</h4>

After a <tt>Maestro_GroupMember</tt> object has 
<a href="#Maestro_GroupMember_Joining_Group">joined</a> a group, it can 
send point-to-point and multicast messages to it.

<p>
The <tt>Maestro_GroupMember</tt> class provides the following downcall methods 
for sending point-to-point (<tt>send</tt>) and multicast (<tt>cast</tt>) messages:

<pre>	void send(<a href="Maestro_Types.htm#Maestro_EndpID">Maestro_EndpID</a> &dest, 
		  <a href="Maestro_Types.htm#Maestro_Message">Maestro_Message</a> &msg);

  	void send(Maestro_EndpID &dest, 
		  Maestro_Message &msg,
		  Maestro_MsgSendView &sendView);

	void send(Maestro_EndpID &dest, 
		  Maestro_Message &msg, 
		  Maestro_MsgSendView &sendView,
		  Maestro_GrpMemb_MsgOptions &msgOps);

	void cast(Maestro_Message &msg);

	void cast(Maestro_Message &msg, 
		  Maestro_MsgSendView &sendView);

	void cast(Maestro_Message &msg, 
		  Maestro_MsgSendView &sendView, 
		  Maestro_GrpMemb_MsgOptions &msgOps);</pre>

<dir>
<li>The <tt>dest</tt> argument in <tt>send</tt> methods specifies the 
<a href="Maestro_Types.htm#Maestro_EndpID">endpoint ID</a> of the
destination.  

<p><li>The <tt>msg</tt> argument contains the 
<a href="Maestro_Types.htm#Maestro_Message">message</a> to be sent.

<p><li><tt>sendView</tt> is an "out" argument.  It specifies the view in which the message
will be delivered to its destination(s).  The <tt>Maestro_MsgSendView</tt> type is
defined as follows:

<pre>	enum Maestro_MsgSendView {
		MAESTRO_MSG_SEND_UNSPECIFIED_VIEW, // The view of msg delivery is unspecified
		MAESTRO_MSG_SEND_CURRENT_VIEW,	   // The msg will be delivered in the current view	
		MAESTRO_MSG_SEND_NEXT_VIEW	   // The msg will be delivered in the next view
	};</pre>

<p>If a <tt>Maestro_GroupMember</tt> object is created over a protocol stack that 
provides the 
<a href="http://www.cs.cornell.edu/Info/Projects/Ensemble/overview.htm"><em>Virtual Synchrony</em></a> 
property, all messages are delivered in the same
view in which they are sent.  However, if a <tt>send</tt> or a <tt>cast</tt> method is
invoked during a view change, the message will be sent (and hence delivered) in the future 
view.  The <tt>sendView</tt> argument can then be used to determine the view in which a 
given message will be sent and delivered.

<p><li>The <tt>msgOps</tt> argument has no effect 
(the  <tt>Maestro_GrpMemb_MsgOptions</tt> structure is empty).  
It is intended to be overloaded in subclasses of the <tt>Maestro_GroupMember</tt> class.
</dir>

When a point-to-point or a multicast message is received by a group member,
the <tt>grpMemb_ReceiveSend_Callback</tt> (respectively, 
<tt>grpMemb_ReceiveCast_Callback</tt>)
method is invoked by Ensemble.  The message callbacks are defined in
<tt>Maestro_GroupMember</tt> as follows:

<pre>	void grpMemb_ReceiveCast_Callback(Maestro_EndpID &origin,
					  Maestro_Message &msg) {}

	void grpMemb_ReceiveSend_Callback(Maestro_EndpID &origin,
					  Maestro_Message &msg) {}</pre>

By default, no action is taken when a message is received.  Message callbacks
are intended to be overloaded in subclasses of the <tt>Maestro_GroupMember</tt> class
to implement application-specific functionality.


<p>
<h4>
<a name="Maestro_GroupMember_Membership_Changes">
<hr>Participating in Membership Changes
</a>
</h4>

When member objects join or leave the group (or become unavailable),
Ensemble starts the view-change protocol to bring the view of
group members up to date.  


<p>In the first phase of the view-change
protocol, the group is <em>blocked</em>, so that members
cannot send any new messages.  
Ensemble invokes the <tt>grpMemb_Block_Callback()</tt> method of a
<tt>Maestro_GroupMember</tt> object to notify it 
that the group is about to be blocked.  
The application can send messages for the current view from within 
<tt>grpMemb_Block_Callback()</tt>.  
However, after the callback returns, all subsequent message downcalls will be delayed by 
Ensemble until the next view is installed.

<p>
The <tt>grpMemb_Block_Callback()</tt> method is defined in 
<tt>Maestro_GroupMember</tt> as follows:

<pre>	void grpMemb_Block_Callback() {}</pre>

By default, no action is taken when a group is being blocked.  
However, <tt>grpMemb_Block_Callback()</tt> can be overloaded in
subclasses of the <tt>Maestro_GroupMember</tt> class to implement
application-specific behavior.

<!--
<p>
When the coordinator of a group is ready to install a new view, 
Ensemble invokes the <tt>grpMemb_ChangingView_Callback</tt>
method at participating group members.  The <tt>grpMemb_ChangingView_Callback</tt>
function is defined in <tt>Maestro_GroupMember</tt> as follows:

<pre>	void grpMemb_ChangingView_Callback(Maestro_GrpMemb_ViewData &viewData,
					   Maestro_Message &stateMsg) {}</pre>
-->

<!--
<p>
<li><tt>stateMsg</tt> is an "out" argument.  A member can write its state information
to the <tt>stateMsg</tt> message.  State messages from all view members will be collected
and passed to the coordinator with a call to the <tt>grpMemb_ProposeView_Callback()</tt>
method.  The <tt>grpMemb_ProposeView_Callback()</tt> function is defined in 
<tt>Maestro_GroupMember</tt> as follows:

<pre>	void grpMemb_ProposeView_Callback(Maestro_GrpMemb_ViewData &viewData,
				          Maestro_MessageList &stateMsgs,
				          Maestro_Message &viewMsg) {}</pre>

<li><a href="#viewData"><tt>viewData</tt></a> describes the new view. 
<li><tt>stateMsgs</tt> contains state messages filled in by view members from within
	<tt>grpMemb_ChangingView_Callback</tt>'s.
<li><tt>viewMsg</tt> is an "out" parameter.  The coordinator can include some information
with the view message (by writing to <tt>viewMsg</tt>), which will be delivered to group members 
along with the new view.

<p>
By default, the <tt>grpMemb_ChangingView_Callback</tt> and 
<tt>grpMemb_ProposeView_Callback</tt> methods are implemented in 
<tt>Maestro_GroupMember</tt> as no-op functions.  However, 
they can be overloaded in subclasses of the <tt>Maestro_GroupMember</tt> class 
to implement application-specific behavior.

<p>
After Ensemble returns from a call to <tt>grpMemb_ProposeView_Callback</tt> 
at the coordinator, it sends out the new view, along with the view message
filled-in by the coordinator from within <tt>grpMemb_ProposeView_Callback</tt>.
-->

<p>
When the new view is ready to be installed, the
<tt>grpMemb_ViewMsg_Callback()</tt> method is invoked at the coordinator.
The <tt>grpMemb_ViewMsg_Callback()</tt> function is defined in 
<tt>Maestro_GroupMember</tt> as follows:

<pre>	void grpMemb_ViewMsg_Callback(Maestro_GrpMemb_ViewData &viewData,
				      Maestro_Message &viewMsg) {}</pre>


<li><a href="#viewData"><tt>viewData</tt></a> describes the new view. 
<li><tt>viewMsg</tt> is an "out" parameter.  The coordinator can include 
some data with the view message (by writing to <tt>viewMsg</tt>), 
which will be delivered to group members 
along with the new view.

<p>
By default, the <tt>grpMemb_ViewMsg_Callback</tt> 
is implemented in 
<tt>Maestro_GroupMember</tt> as a no-op function.  However, 
it can be overloaded in subclasses of the <tt>Maestro_GroupMember</tt> class 
to implement application-specific behavior.

<p>
After the call to <tt>grpMemb_ViewMsg_Callback</tt> returns, 
the new view is installed at group members included in it.
When a group member receives a new view, 
the <tt>grpMemb_AcceptedView_Callback</tt>
method is invoked.  Upon returning from the  call to 
<tt>grpMemb_AcceptedView_Callback</tt>, Ensemble unblocks the group, so that 
messages can be sent again.  The <tt>grpMemb_AcceptedView_Callback</tt> 
method is defined in <tt>Maestro_GroupMember</tt> as follows:

<pre>	void grpMemb_AcceptedView_Callback(Maestro_GrpMemb_ViewData &viewData,
					   Maestro_Message &msg) {}</pre>
<li>
<a name="viewData"><tt>viewData</tt></a> describes the new view.  The <tt>Maestro_GrpMemb_ViewData</tt>
structure has the following fields:

<dir>
        <li><tt>Maestro_String version</tt> -- The version of Ensemble in use.
        <li><tt>Maestro_String groupName</tt> -- Name of the group.
	<li><tt>Maestro_EndpID myEndpID</tt> -- The endpoint ID of the member.
	<li><tt><a href="Maestro_Types.htm#Maestro_EndpList">Maestro_EndpList</a> members</tt> --
		The list of members in the new view.
	<li><tt>Maestro_EndpList newMembers</tt> -- The list of members added to the member's old view.
	<li><tt>Maestro_EndpList departedMembers</tt> -- The list of members removed from the member's 
		old view.
	<li><tt>int nmembers</tt> -- The size of the new view.
	<li><tt>int myRank</tt> -- The member's rank in the new view.
	<li><tt>int myOldRank</tt> -- The member's rank in its old view.
	<li><tt>Maestro_EndpID coordinator</tt> -- The endpoint ID of the coordinator of the new view.
	<li><tt>Maestro_EndpID oldCoordinator</tt> -- The endpoint ID of the coordinator of the 
		member's old view.
	<li><tt>Maestro_String protocol</tt> -- The protocol stack used by Ensemble in the new view.
        <li><tt>int groupdFlag</tt> -- The flag is set if group daemon 
	    (<a href="groupd.htm">Ensemble Membership Service</a>) is in use.
        <li><tt>Maestro_ViewID viewID</tt> -- The ID of the view.
	<li><tt>Maestro_String params</tt> -- Group parameters.
        <li><tt>int primaryFlag</tt> -- The flag is set if the view is primary.
</dir>
<li><tt>msg</tt> contains the view message filled in by the coordinator.

<p>
<h4>
<a name="External_Failure_Detectors">
<hr>Using External Failure Detectors
</a>
</h4>

Maestro supports external failure detectors via the <tt>suspect()</tt> method,
which is defined in <tt>Maestro_GroupMember</tt> as follows:

<pre>	void suspect(Maestro_EndpList &suspects);</pre>

The <tt>suspects</tt> parameter contains the list of members which are believed to be 
faulty and should be removed from the view.

<p>
<h4>
<a name="Changing_Protocol_Stacks">
<hr>Changing Protocol Stacks
</a>
</h4>

The protocol stack of a view can be changed with a call to the <tt>changeProtocol</tt>
method of <tt>Maestro_GroupMembers</tt>.  The <tt>changeProtocol</tt> function is
declared as follows:

<pre>	 void changeProtocol(Maestro_String &protocol);</pre>

The <tt>protocol</tt> parameter specifies the new stack.  Protocols in a stack are
separated by colons, such as in 
<br><tt>"Top:Heal:Switch:Leave:Inter:Intra:Elect:Merge:Sync:Suspect:Top_appl:Pt2pt:Frag:Stable:Mnak:Bottom"</tt>.  

<p>
Only the coordinator of a view can request a replacement of a protocol stack. 
Calls to <tt>changeProtocol</tt> made by non-coordinator view members are ignored.

<p>
<h4>
<a name="Miscellaneous">
<hr>Miscellaneous Functions
</a>
</h4>

<li>The coordinator of a view can request a view change with a <tt>requestNewView()</tt> method,
which is declared as follows:

<pre>	void requestNewView();</pre>

<li>The endpoint ID of a group member object can be obtained (after the member has
joined the group) with the <tt>myEndpID()</tt> method, which is declared as follows:

<pre>	void myEndpID(Maestro_EndpID &eid);</pre>

<li>The <tt>Maestro_GroupMember</tt> class defines the <tt>grpMemb_Heartbeat_Callback()</tt> 
function, which is periodically invoked by Ensemble as a callback.  
<tt>grpMemb_Heartbeat_Callback()</tt> is defined as a no-op function as follows:

<pre>	void grpMemb_Heartbeat_Callback(unsigned time) {}</pre>

It is intended that <tt>grpMemb_Heartbeat_Callback()</tt> will be overloaded in subclasses
of <tt>Maestro_GroupMember</tt> to implement application-specific functionality.

<p><hr>
<address>
send mail to
<a href="mailto:alexey@cs.cornell.edu">alexey@cs.cornell.edu</a>
</address>

</body>
</html>
