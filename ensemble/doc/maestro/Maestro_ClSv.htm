<!-- File: Maestro_ClSv.htm -->
<!-- Author: Alexey Vaysburd -->
<!-- Contents: Description of Maestro Client/Server Class -->
<!-- Created: September 1995 -->
<!-- Updated:  Feb 1997 -->

<html>

<head>
<title>Maestro Clients/Servers with State Transfer Protocol</title>
<link rev="made" href="mailto:alexey@cs.cornell.edu (Alexey Vaysburd)">
</head>

<BODY TEXT="#000000" BGCOLOR="#FCD5AD" LINK="#0000FF" VLINK="#551A8B" ALINK="#FF0000">
<TABLE WIDTH="800" >
<TR>
<TD ALIGN=LEFT VALIGN=TOP WIDTH="100"><IMG SRC="maestro-logo.jpg" VSPACE=20 HSPACE=20 HEIGHT=105 WIDTH=70 ALIGN=LEFT></TD>

<TD WIDTH="500" BORDER="0">
<H1>Maestro Open Toolkit: Clients/Servers with State Transfer Protocol</H1>
</TD>
</TR>
</TABLE>

This document is a part of online 
<a href="http://www.cs.cornell.edu/Info/Projects/Ensemble/index.htm">
Ensemble</a> documentation, under
<a href="Maestro.htm">Maestro Open Toolkit</a>.

<p>
<h2>
<a name="Maestro_ClSv">
<hr>Maestro_ClSv
</a>
</h2>

<tt>Maestro_ClSv</tt> is a public subclass of 
<a href="Maestro_GroupMember.htm#Maestro_GroupMember"><tt>Maestro_GroupMember</tt></a>.  
It implements the abstraction of clients/servers with a 
<a href="Maestro_Xfer.htm">state transfer protocol</a>.

<p>
<h4>Index of Topics:</h4>
<li><a href="#Creating_Maestro_ClSv_Objects">Creating client/server objects</a>
<li><a href="#Maestro_ClSv_Sending_Messages">Sending messages</a>
<li><a href="#Maestro_ClSv_Monitoring">Participating in membership changes</a>
<li><a href="#Maestro_ClSv_State_Transfer">State transfer</a>

<p>
<h4>Index of Downcalls/Callbacks:</h4>
<li><a href="#Maestro_ClSv_Sending_Messages"><tt>cast</tt></a>
<li><a href="#Maestro_ClSv_Sending_Messages"><tt>send</tt></a>
<li><a href="#Maestro_ClSv_Sending_Messages"><tt>scast</tt></a>
<li><a href="#Maestro_ClSv_Sending_Messages"><tt>lsend</tt></a>
<li><a href="#Maestro_ClSv_State_Transfer"><tt>askState</tt></a>
<li><a href="#Maestro_ClSv_State_Transfer"><tt>sendState</tt></a>
<li><a href="#Maestro_ClSv_State_Transfer"><tt>xferDone</tt></a>
<li><a href="#Maestro_ClSv_Sending_Messages"><tt>clSv_ReceiveCast_Callback</tt></a>
<li><a href="#Maestro_ClSv_Sending_Messages"><tt>clSv_ReceiveSend_Callback</tt></a>
<li><a href="#Maestro_ClSv_Sending_Messages"><tt>clSv_ReceiveScast_Callback</tt></a>
<li><a href="#Maestro_ClSv_Sending_Messages"><tt>clSv_ReceiveLsend_Callback</tt></a>
<li><a href="#Maestro_ClSv_Monitoring"><tt>clSv_Block_Callback</tt></a>
<li><a href="#Maestro_ClSv_Monitoring"><tt>clSv_ChangingView_Callback</tt></a>
<li><a href="#Maestro_ClSv_Monitoring"><tt>clSv_ProposeView_Callback</tt></a>
<li><a href="#Maestro_ClSv_Monitoring"><tt>clSv_AcceptedView_Callback</tt></a>
<li><a href="#Maestro_ClSv_State_Transfer"><tt>clSv_askState_Callback</tt></a>
<li><a href="#Maestro_ClSv_State_Transfer"><tt>clSv_rcvState_Callback</tt></a>

<p>
<h4>
<a name="Creating_Maestro_ClSv_Objects">
<hr>Creating Maestro_ClSv Objects
</a>
</h4>

The <tt>Maestro_ClSv</tt> class provides the following constructor:

<pre>	Maestro_ClSv(Maestro_ClSv_Options &ops);</pre>

<tt>Maestro_ClSv_Options</tt> is a public subclass of 
<a href="Maestro_GroupMember.htm#Creating_Maestro_GroupMember_Objects"
<tt>Maestro_grpMemb_Options</tt></a>.
In addition to fields inherited from <tt>Maestro_grpMemb_Options</tt>,
<tt>Maestro_ClSv_Options</tt> has the following two public fields:

<dir>
<li><tt>Maestro_MbrshipOption mbrshipType</tt> -- Specifies whether the member is created
as a server (<tt>mbrshipType = MAESTRO_SERVER</tt>) or as a client
(<tt>mbrshipType = MAESTRO_CLIENT</tt>, the default value).

<li><tt>Maestro_XferType xferType</tt> -- Specifies the protection level for state transfer.
The value of <tt>xferType</tt> is one of the following:
	<dir>
	<li><tt>MAESTRO_NO_XFER</tt> -- State transfer is not required (the default value).
	<li><tt>MAESTRO_FREE_XFER</tt> -- Group members can send all types of messages 
		during state transfer.
	<li><tt>MAESTRO_PROTECTED_XFER</tt> -- Group members can only send "safe" (state-neutral) 
		and state-transfer messages during state transfer.
	<li><tt>MAESTRO_ATOMIC_XFER</tt> -- Only state-transfer messages can be sent during
		state transfer.
        </dir>
</dir>

Note that clients do not receive multicasts addressed to servers and do not 
participate in state transfer. 

<p>
<h4>
<a name="Maestro_ClSv_Sending_Messages">
<hr>Sending/Receiving Messages
</a>
</h4>

The <tt>Maestro_ClSv</tt> class defines downcall methods for sending point-to-point
messages (<tt>send</tt>), multicasts to the entire group (<tt>cast</tt>), 
multicasts to servers only (<tt>scast</tt>), and multicasts to group subsets
(<tt>lsend</tt>).  Message downcalls are declared in <tt>Maestro_ClSv</tt>
as follows:

<pre>	void cast(Maestro_Message &msg);

	void cast(Maestro_Message &msg, 
		  Maestro_MsgSendView &sendView);

	void cast(Maestro_Message &msg, 
		  Maestro_MsgSendView &sendView,
		  Maestro_ClSv_MsgOptions &msgOps);  

	void send(Maestro_EndpID &dest, 
		  Maestro_Message &msg);  

	void send(Maestro_EndpID &dest, 
		  Maestro_Message &msg, 
		  Maestro_MsgSendView &sendView);

	void send(Maestro_EndpID &dest, 
		  Maestro_Message &msg,
		  Maestro_MsgSendView &sendView,
		  Maestro_ClSv_MsgOptions &msgOps);
		    
	void scast(Maestro_Message &msg);

	void scast(Maestro_Message &msg, 
		   Maestro_MsgSendView &sendView);

	void scast(Maestro_Message &msg, 
		   Maestro_MsgSendView &sendView,
		   Maestro_ClSv_MsgOptions &msgOps);

	void lsend(Maestro_Message &msg, 
		   Maestro_MsgSendView &sendView,
		   Maestro_ClSv_MsgOptions &msgOps);</pre>

<li>The <tt>dest</tt> argument specifies the 
<a href="Maestro_Types.htm#Maestro_EndpID">endpoint ID</a> of the destination 
of a point-to-point message.

<p>
<li>The <tt>sendView</tt> argument has the same semantics as in 
<a href="Maestro_GroupMember.htm#Maestro_GroupMember_Sending_Messages">
message downcalls of the <tt>Maestro_GroupMember</tt> class</a>.

<p>
<li>The <tt>msg</tt> parameter contains the 
<a href="Maestro_Types.htm#Maestro_Message">message</a> to be sent.

<p>
<li>The <tt>Maestro_ClSv_MsgOptions</tt> class (of the <tt>msgOps</tt> argument)
is defined in <tt>Maestro_ClSv</tt> with the following public fields:
	<dir>
	<li><tt>Maestro_MsgXferSafety msgXferSafety</tt> -- Specifies the state-transfer 
	safety level of a message. The value of <tt>msgXferSafety</tt> can be one
	of the following:  <tt>MAESTRO_MSG_GENERIC</tt> (the default value) -- for 
	regular messages; <tt>MAESTRO_MSG_SAFE</tt> -- for "state-safe" messages;
	<tt>MAESTRO_MSG_XFER</tt> -- for state-transfer messages.

		<p>
		<dir>
		<li>During <tt>MAESTRO_FREE_XFER</tt> state transfers, all messages may be sent,
		and it is left up to the application to guarantee consistency of the global state.  

		<p>
		<li>During <tt>MAESTRO_PROTECTED_XFER</tt> state transfers, only messages with the 
		<tt>MAESTRO_MSG_SAFE</tt> or <tt>MAESTRO_MSG_XFER</tt> safety levels may be sent.
		Messages with <tt>MAESTRO_MSG_GENERIC</tt> safety level are delayed by Maestro 
		until state transfer completes.

		<p>
		<li>During <tt>MAESTRO_ATOMIC_XFER</tt> state transfers, only state-transfer messages 
		(with <tt>MAESTRO_MSG_XFER</tt> safety level) may be sent.
		All other messages are delayed by Maestro until state transfer completes.
		</dir>

	<p>  
	<li><tt>Maestro_EndpList destList</tt> -- Specifies the list of client destinations
	for an <tt>scast</tt> message; specifies the list of all destinations for an
	<tt>lsend</tt> message.  By default, <tt>destList</tt> is empty.
	</dir>

<p>
<li>An <tt>scast</tt> downcall sends a message to all servers and to an (empty by default) 
list of clients.  The client destinations are specified with the <tt>destList</tt> option.
For example:

<pre>	Maestro_Message msg; 	
	msg << Maestro_String("hello"); 	
	memb.scast(msg);		// Send msg to servers only.
	....
	HorsEndpID eid;
	....
	Maestro_ClSv_MsgOptions mops; 	
	mops.destList += eid;		// Assuming eid is a client member of the group.

	memb.scast(msg, mops);		// Send msg to servers and to eid.</pre>

<li>The <tt>lsend</tt> downcall sends a message to the (empty by default) list of 
destinations included in <tt>destList</tt>.
For example:

<pre>	Maestro_Message msg; 	
	msg << Maestro_String("world");
	Maestro_EndpID endp1, endp2;
	....
	Maestro_ClSv_MsgOptions mops; 	
	mops.destList += endp1; 	
	mops.destList += endp2;		// Assuming endp1 and endp2 are members of the group.

	memb.lsend(msg, mops);		// Send msg to endp1 and endp2.</pre>

When a message is received at a destination, Ensemble invokes the corresponding
message callback.  The <tt>Maestro_ClSv</tt> class defines the following
message callbacks corresponding to <tt>cast</tt>, <tt>send</tt>, <tt>scast</tt>,
and <tt>lsend</tt> downcalls respectively:

 
<pre>	void clSv_ReceiveCast_Callback(Maestro_EndpID &origin, 
				       Maestro_Message &msg)  {}

	void clSv_ReceiveSend_Callback(Maestro_EndpID &origin, 
				       Maestro_Message &msg)  {}

	void clSv_ReceiveScast_Callback(Maestro_EndpID &origin, 
					Maestro_Message &msg) {}

	void clSv_ReceiveLsend_Callback(Maestro_EndpID &origin, 
					Maestro_Message &msg) {}</pre>

The message callbacks are defined in <tt>Maestro_ClSv</tt> as no-op functions.
They are intended to be overloaded in subclasses of the <tt>Maestro_ClSv</tt>
class to implement application-specific functionality.

<p>
<h4>
<a name="Maestro_ClSv_Monitoring">
<hr>Participating in Group Membership Changes
</a>
</h4>

The <tt>Maestro_ClSv</tt> class defines the following callback methods
invoked by Ensemble during membership changes:

<pre>	void clSv_Block_Callback() {}

	void clSv_ProposeView_Callback(Maestro_ClSv_ViewData &viewData, 
				       Maestro_MessageList &stateMsgs, 
				       Maestro_Message &viewMsg) {}
  
	void clSv_AcceptedView_Callback(Maestro_ClSv_ViewData& viewData,
					Maestro_Message &viewMsg) {}

	void clSv_ChangingView_Callback(Maestro_ClSv_ViewData &viewData,
					Maestro_Message &stateMsg) {}</pre>

The <tt>clSv_Block_Callback()</tt>,
<tt>clSv_ChangingView_Callback()</tt>, <tt>clSv_ProposeView_Callback</tt>, 
and <tt>clSv_AcceptedView_Callback()</tt> methods have the same semantics as
corresponding 
<a href="Maestro_GroupMember.htm#Maestro_GroupMember_Membership_Changes">
membership-change-protocol callbacks of the <tt>Maestro_GroupMember</tt> class</a>. 
The callbacks are defined in <tt>Maestro_ClSv</tt> as no-op functions, and are intended
to be overloaded in subclasses of the <tt>Maestro_ClSv</tt> class to implement
application-specific functionality.

<p>
The 
<a name="viewData"><tt>Maestro_ClSv_ViewData</tt></a> structure adds the following
fields in addition to those inherited from the 
<a href="Maestro_GroupMember.htm#viewData">
<tt>Maestro_GrpMemb_ViewData</tt></a> class:

	<dir>
  	<li><tt>Maestro_EndpList servers</tt> -- The list of servers in the new view.
	<li><tt>Maestro_EndpList newServers</tt> -- Servers added since the previous view. 
	<li><tt>Maestro_EndpList departedServers</tt> -- Servers removed from the previous view.
  	<li><tt>Maestro_EndpList xferServers</tt> -- Servers doing state transfer in the new view.
	<li><tt>Maestro_EndpList newXferServers</tt> -- State-transfer servers added since the previous view.
	<li><tt>Maestro_EndpList departedXferServers</tt> -- State-transfer servers removed from the previous view.
  	<li><tt>Maestro_EndpList clients</tt> -- The list of clients in the new view.
	<li><tt>Maestro_EndpList newClients</tt> -- Clients added since the previous view.
	<li><tt>Maestro_EndpList departedClients</tt> -- Clients removed from the previous view.
  	<li><tt>Maestro_EndpID serverCoordinator</tt> -- The server with the lowest rank in the view.
	<li><tt>Maestro_EndpID oldServerCoordinator</tt> -- The server coordinator of the previous view.
  	<li><tt>Maestro_ViewType myXferType</tt> -- Same as the value passed to the member object's constructor.
	<li><tt>Maestro_ViewType viewType</tt> -- The type of state transfer in progress (if any).
  	<li><tt>Maestro_ClSvState state</tt> -- The state of the member in the new view (one of 
		<tt>MAESTRO_CLSV_STATE_CLIENT_NORMAL,
			MAESTRO_CLSV_STATE_BECOMING_SERVER, 
			MAESTRO_CLSV_STATE_SERVER_XFER, 
			MAESTRO_CLSV_STATE_SERVER_XFER_DONE, 
			MAESTRO_CLSV_STATE_SERVER_NORMAL</tt>).
	<li><tt>Maestro_ClSvState oldState</tt> -- The state of the member in the previous view.
  	<li><tt>int myServerRank</tt> -- The rank of the member among servers in the new view.
	<li><tt>int myOldServerRank</tt> -- The rank of the member among servers in the previous view.
  	<li><tt>Maestro_MbrshipOption myMbrshipType</tt> -- Same as the value passed to the member 
		object's constructor.
	<li><tt>int startXfer</tt> -- The flag is set when state transfer has to be 
		(re)started in the new view (which happens when the state of the 
		group member changes to <tt>MAESTRO_CLSV_SERVER_XFER</tt>). 
	</dir>

If state transfer is in progress in a view, the <tt>viewType</tt> field in the
corresponding <tt>viewData</tt> structure specifies the required safety level 
(one of <tt>MAESTRO_FREE_XFER, MAESTRO_PROTECTED_XFER, MAESTRO_ATOMIC_XFER</tt>).
If the safety level of a message is lower than that required by state transfer,
then Maestro will delay sending the message until state transfer completes.

<p>
<h4>
<a name="Maestro_ClSv_State_Transfer">
<hr>State Transfer
</a>
</h4>

The <tt>Maestro_ClSv</tt> class implements a 
<a href="Maestro_Xfer.htm">State Transfer Protocol</a> and provides the following 
interface to it.

<p>
<li>Maestro notifies a server member that state transfer has to be (re)started
by setting the <tt>startXfer</tt> flag in the
<a href="#viewData"><tt>viewData</tt></a> structure.
To request a portion of the state, the member can invoke the <tt>askState</tt> downcall,
which is declared in <tt>Maestro_ClSv</tt> as follows:

<pre>	void askState(Maestro_EndpID &svr, Maestro_Message &msg);</pre>

The <tt>svr</tt> argument specifies the server from which a portion of the state is being
requested.  The <tt>msg</tt> argument contains the state request message which tells the 
server which part of the state is being asked for.

<p>
<li>When a normal server receives a state request (submitted with a call to <tt>askState</tt>),
it invokes the <tt>askState_Callback</tt> method, which is defined in <tt>Maestro_ClSv</tt>
as follows:

<pre>	void askState_Callback(Maestro_EndpID& origin, Maestro_Message &msg) {}</pre>

The <tt>origin</tt> argument identifies the member receiving the state.  The <tt>msg</tt>
argument contains the state-request message.

<p>
<li>When a normal server receives a state request, it should eventually respond by sending the
requested portion of the state to the state-recepient member.  To send a state message,
the server can invoke the <tt>sendState</tt> downcall, which is declared in
<tt>Maestro_ClSv</tt> as follows:

<pre>	void sendState(Maestro_EndpID &xferSvr, Maestro_Message &msg);</pre>

The <tt>xferSvr</tt> argument specifies the endpoint ID of the state-recepient member
(it should be the same as the <tt>origin</tt> argument in the corresponding
invocation of <tt>askState_Callback</tt>).  The <tt>msg</tt> argument contains the 
reply message with the requested portion of the state in it.

<p>
<li>After a state-recepient member receives a state message (sent by a normal server
with a call to <tt>sendState</tt>), the member invokes the
<tt>rcvState_Callback</tt> method, which is defined in <tt>Maestro_ClSv</tt> as
follows:

<pre>	void rcvState_Callback(Maestro_EndpID& origin, Maestro_Message &msg) {}</pre>

The <tt>origin</tt> argument identifies the sender of the state message.
The message is passed with the <tt>msg</tt> argument.

<p>
<li>The <tt>askState_Callback</tt> and <tt>rcvState_Callback</tt> methods are defined
in <tt>Maestro_ClSv</tt> as no-op functions.  They are intended to be overloaded
in subclasses of <tt>Maestro_ClSv</tt> to implement application-specific functionality.

<p>
<li>After a state-recepient member completes state transfer, it should invoke the
<tt>xferDone</tt> method.  Following that, Ensemble will eventually install a new view 
in which the  member will be included in the list of normal servers.

<p>
The state transfer interface of the <tt>Maestro_ClSv</tt> class is at a rather low level, 
albeit most general.  The 
<a href="Maestro_CSX.htm#Maestro_CSX"><tt>Maestro_CSX</tt></a> class (a subclass of
<tt>Maestro_ClSv</tt>) implements a higher-level state transfer interface, which should
be adequate for many applications.

<p>
<hr>
<address>
send mail to
<a href="mailto:alexey@cs.cornell.edu">alexey@cs.cornell.edu</a>
</address>

</body>
</html>
