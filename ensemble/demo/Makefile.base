#*************************************************************#
#
# DEMO directory base Makefile
#
# Author: Mark Hayden, 8/96
#
#*************************************************************#
DEMOS	= mtalk$(EXE) groupd$(EXE) gossip$(EXE) rand$(EXE) fifo$(EXE) \
          perf$(EXE) ensemble$(EXE) armadillo$(EXE) socktest$(EXE)
#DEMOS	= socktest$(EXE) mtalk$(EXE) 
OBJS	= mtalk$(CMO) groupd$(CMO) gossip$(CMO) rand$(CMO) fifo$(CMO) perf$(CMO)  \
	  lensemble$(CMO) armadillo$(CMO) socktest$(CMO)
#OBJS	= armadillo$(CMO)
OPTOBJS = mtalk.cmx groupd.cmx gossip.cmx rand.cmx fifo.cmx perf.cmx \
	  lensemble.cmx armadillo.cmx socktest.cmx
EXEC	= _exec-$(PLATFORM)$(EXE)
RUNT    = _runt-$(PLATFORM)$(EXE)
#*************************************************************#

.SUFFIXES: .ml .cmo .cmx .mli .cmi
.mli.cmi:
	ocamlc -I $(ENSLIB) -c $<
.ml.cmo:
	ocamlc -I $(ENSLIB) -c $<
.ml.cmx:
	ocamlopt -I $(ENSLIB) -c $<

#*************************************************************#

#gorp:
#	make -C ../test gorp

all: basic $(DEMOS)

# Make stuff in subdirectories too
everything: all
	cd tk ; make
	cd life ; make

basic: $(OBJS) $(ENSCONFDEP)
	$(RM) $(EXEC)
	$(MLLINK) $(MLLINKFLAGS) -o $(EXEC) $(LIBSYS) $(ENSCONF) $(CRYPTO_LINK) $(OBJS)

#	ocamlc -o $(EXEC) $(LIBSYS) $(ENSCONF) ../lib/libmpi$(CMA) -cclib ../lib/libcmpi$(ARC) -cclib /usr/local/mpi/lib/LINUX/ch_p4/libmpi.a  $(OBJS)
#*************************************************************#
# Standard demos.  We link/copy the _exec program to the names
# of the various demos.  It's all the same executable, which
# does different things depending on its name.  This is a
# hack, but worth the savings in link time.

gossip$(EXE): $(EXEC)
	$(RM) gossip$(EXE)
	$(LN) $(EXEC) gossip$(EXE)

groupd$(EXE): $(EXEC)
	$(RM) groupd$(EXE)
	$(LN) $(EXEC) groupd$(EXE)

mtalk$(EXE): $(EXEC)
	$(RM) mtalk$(EXE)
	$(LN) $(EXEC) mtalk$(EXE)

rand$(EXE): $(EXEC)
	$(RM) rand$(EXE)
	$(LN) $(EXEC) rand$(EXE)

fifo$(EXE): $(EXEC)
	$(RM) fifo$(EXE)
	$(LN) $(EXEC) fifo$(EXE)

perf$(EXE): $(EXEC)
	$(RM) perf$(EXE)
	$(LN) $(EXEC) perf$(EXE)

ensemble$(EXE): $(EXEC)
	$(RM) ensemble$(EXE)
	$(LN) $(EXEC) ensemble$(EXE)

armadillo$(EXE): $(EXEC)
	$(RM) armadillo$(EXE)
	$(LN) $(EXEC) armadillo$(EXE)

socktest$(EXE): $(EXEC)
	$(RM) socktest$(EXE)
	$(LN) $(EXEC) socktest$(EXE)
#*************************************************************#

clean:
	$(RM) *~ .*~ *.cm* *.o *.obj *.exe .nfs* .err TAGS core gmon.out

realclean: clean
	$(RM) $(DEMOS) _exec* _runt* 
	$(RM) hot_*$(EXE) outboard$(EXE)

depend:
	ocamldep -I $(ENSLIB) *.ml *.mli > $(DEPEND)

include $(DEPEND)

#*************************************************************#
# Make different versions of the demos

socket: socketexec $(DEMOS)

socketexec: $(OBJS) $(ENSCONFDEP_skt)
	$(RM) $(EXEC)
	$(MLLINK) $(MLLINKFLAGS) -o $(EXEC) $(LIBSYS) $(ENSCONF_skt) $(OBJS)

#*************************************************************#

ensembles: lensemble$(CMO) $(ENSCONFDEP)
	$(MLLINK) $(MLLINKFLAGS) -make_runtime -o ensemblesrun$(EXE) $(LIBSYS) $(ENSCONF) lensemble$(CMO)
	strip ensemblesrun$(EXE)
	ocamlc -use_runtime ensemblesrun$(EXE) -o ensembles $(LIBSYS) $(ENSCONF) lensemble$(CMO)

#*************************************************************#
