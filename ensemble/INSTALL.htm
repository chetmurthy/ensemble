<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.72 [en] (X11; U; SunOS 5.6 sun4m) [Netscape]">
   <title>Ensemble Installation Instructions
</title>
</head>
<body text="#000000" bgcolor="#FFFFFF">

<center>
<h1>
Ensemble 1.10</h1></center>

<center><h2>
Release Notes and Installation Instructions
</h2></center>

<center>Copyright &copy;1997 Cornell University, Ithaca, NY, USA,
Hebrew University 2001, Jerusalem Israel.
<br>All rights reserved.</center>

<p><i>Last Revised</i>: Thurs March 23, 15:33:48 EDT 2000
<br><i>Maintainers</i>:
<a href="mailto:orodeh@il.ibm.com">Ohad Rodeh</a>,
<hr><a NAME="intro"></a>
<h2>Introduction</h2>
<p>
Thank you for choosing Ensemble as your message transport system. Its
platform independence allows you to interconnect a wide range of
computing environments.
<p>
The following instructions guide you through the process of installing
Ensemble. Click on the hypertext links for the details about each step.
The installation instructions are designed to be as simple as possible.
However, please read them through carefully before starting and follow
them carefully. Also, please read the file <b>RELEASE_NOTES</b> for
the latest information on this release.
<p>
These installation instructions are aimed at getting Ensemble up and
running on your system as quickly as possible. After successfully
installing the system, you may wish to compile Ensemble for the
native instruction set of your computer and to use an optimized C
library we provide in order to improve performance. The difference is
only significant when Ensemble is used in high-performance settings
and many users find the performance of bytecode satisfactory.
<p>
<hr>
<a NAME="software"></a>
<h2>Required Software</h2>
<p>
<b>
To compile Ensemble you need <b>Version 3.02</b> of the Objective
Caml (O'Caml) compiler.</b>
<p>
O'Caml is freely available via the World Wide Web at <b><a
href="#ocaml">http://caml.inria.fr/ocaml/</a></b>.  Please ensure
you have the correct version. See the instructions below on how to
obtain it. This is a different compiler version than required by
previous versions of Ensemble! Version 0.40 of Ensemble used
ocaml-1.05; Version 0.50 of Ensemble used ocaml-1.07; version 0.60
used ocaml-2.01; and we are now up to ocaml-3.02.
<p>
On Unix platforms, to compile the HOT C interface, you need a POSIX
compliant threads package. (On Solaris, you can use the native
threads library). More recent versions of Linux now provide a POSIX
compliant pthreads package (pthreads), however, Linux users with
older versions of the operating system, or users who still use SunOS,
will need to acquire a threads package, such as the FSU threads
package. Click <a
href="#fsu-threads">here</a> for information on how to acquire and
install the FSU pthreads package. 
<p>
To compile the <a
href="http://www.cs.cornell.edu/Info/Projects/Ensemble/Maestro/Maestro.html">Maestro</a>
tools C++ interface, you will need a C++ compiler. We use the
Microsoft C++ compiler on Windows NT and gcc on Unix platforms, but
other compilers should work. On NT to build the optimized versions of
HOT C and Maestro, you will also need the masm (MS Compatibility
Driver) and ml (MS Macro Assembler) executables installed and located
in your path.
<p>
<hr>
<a NAME="upgrading"></a>
<h2>Upgrade Information</h2>
<p>
If you are upgrading from an older version, due to problems with long
environment variable names on certain platforms, we have changed the
names for the Ensemble environment variables to use the prefix 'ENS_'
instead of 'ENSEMBLE_'.  Please update your configuration.
<p>
The name of the group membership service has been changed from
'domain' to 'groupd'. The names of the corresponding environment
variables have changed from 'ENS_DOMAIN_' to 'ENS_GROUPD_' , as shown
above.
<p>
After you have made these changes, to upgrade your system simply
install the new version of Ensemble as described below. For further
information on the changes in this release, please read the file
<b>ensemble/RELEASE_NOTES</b>.
<p>
<hr>
<a NAME="licensing"></a>
<h2>Licensing</h2>
<p>
Ensemble code is copyrighted by Cornell University, and the Hebrew
University. To use Ensemble you must agree to the terms of the
license. Ensemble is freely available software, but you must agree to
the terms of the license before you can install it.  We ask that you
read the licensing agreement before installing Ensemble.  It can be
found in <b>ensemble/LICENSE</b>.
<p>
<hr>
<a NAME="installation"></a>
<h2>Installation</h2>
<p>
Install Ensemble by following the step-by-step instructions. You need to
get the O'Caml compiler, extract the Ensemble software, and then compile
the portions you wish to use.
<ul>
<li>
Make sure you have <a href="#ocaml">Objective Caml version 3.02</a>
installed.
<li>
Set the <b>CAMLLIB</b> environment variable, and put the path to the
Ocaml binaries in your PATH.
<li>
Download and extract the <a href="#download">Ensemble</a> software.
<li>
Click on the operating system link below to obtain the rest of the
installation instructions.
<ul>
<li><a href="#winnt-install">Windows NT</a>
<li><a href="#unix-install">Unix and Unix-like systems</a>
</ul>
</ul>
In addition, instructions for building Ensemble on <a href="#multiple-platforms">multiple
platforms</a>.
<p>
<hr>
<a NAME="ocaml"></a>
<h2>How to obtain Objective Caml 3.02</h2>
<p>
To compile Ensemble you need Objective Caml version 3.02. <b>Other
versions of the compiler may NOT work.</b> This is because the O'Caml
bytecode format and libraries are not guaranteed to be compatible
across versions.
<p>
If you already have O'Caml you can check which version you have by typing:
<pre>
&nbsp;&nbsp;&nbsp; ocamlc -v
</pre>
This gives you the version of the compiler in your path (if there is
one).  The first line of the output should be:
<pre>
&nbsp;&nbsp;&nbsp; The Objective Caml compiler, version ocaml 3.02
</pre>
If you have some other version, then obtain version 3.02 and install
it.  O'Caml is freely available from <a
href="http://caml.inria.fr/ocaml">http://caml.inria.fr/ocaml</a>
and is easy to install (precompiled binaries are available for
Windows NT). You do not need the native code compiler, although you
can compile Ensemble with it.
<p>
<h3>The O'Caml Tcl/Tk Interface</h3>
<p>
If you want to compile the white board demo or wish to use the O'Caml
Tcl/Tk interface, you will also need the Ocamltk library. This
library is entirely optional. You can install Ensemble without it and
install it later if you change your mind. The library can be obtained
from the O'Caml Web site, under the distrib directory:
<p>
<a href="http://caml.inria.fr/ocaml/distrib.html">http://caml.inria.fr/ocaml/distrib</a>
<p>
In order to build the whiteboard demo (wbml) in the demo/tk
directory, you will have to make sure that the camltk41 libraries are
installed into the CAMLLIB directory. You may also need to
modify the mk/config.mk file to add the path to the Tcl/Tk libraries
(TKLIBS).
<p>
<a href="#installation">Back to installation guide.</a>
<hr>
<a NAME="download"></a>
<h2>How to download and extract the Ensemble software</h2>
<p>
Download Ensemble from <a href="http://www.cs.cornell.edu/Info/Projects/Ensemble/ftp.html">http://www.cs.cornell.edu/Info/Projects/Ensemble/ftp.html</a>.
Ensemble is no longer encrypted. Simply unzip and untar the distribution.
It will put the sources in a directory called "ensemble". On Windows NT
you can use the winzip program. On Unix platforms, do it this way:
<pre>
&nbsp;&nbsp;&nbsp; # uncompress and untar the distribution
&nbsp;&nbsp;&nbsp; gunzip ensemble-1_0.tar.gz
&nbsp;&nbsp;&nbsp; tar xvf ensemble.tar
</pre>
<a href="#installation">Back to installation guide.</a>
<p>
<hr>
<a NAME="winnt-install"></a>
<h2>Building Ensemble for Windows NT</h2>
<p>
<b>**NOTE**</b> This distribution of Ensemble requires users to build
the bytecode libraries - they are not supplied pre-compiled as with previous
distributions. Directions to do so are included below. Some demonstration
applications have been provided which you can use to test the distribution
once the first parts are installed.
<p>
You can also compile everything to run on the native instruction set
of your computer instead of using an interpreter. This will run
faster.
<p>
<a NAME="winnt-demo"></a>
<h3>Building on Windows NT</h3>
<p>
In the configuration file, <b>ensemble\mk\config.nmk</b>, you may
need to edit the following macro definitions (you may wish to try the
default settings first). <b>MSDEV</b>and <b>LIBSYS</b> should have
appropriate values for your C compiler. Set the <b>CAMLLIB</b>
environment variable to be the directory where you installed the
O'Caml libraries (this is used to set the OCAML_LIB
macro. <b>CAMLLIB</b> should have been set when O'Caml was installed
-- see the O'Caml README.win32 file).  However, note that this
environment variable must be set (via Control Panel, System,
Environment) before the DOS console on which you will compile
Ensemble is opened.
<p>
Compile the bytecode and demonstration programs as follows. Note that
on Windows NT, you need to use <b>nmake</b> and the
<b>Makefile.nt</b> versions of the makefiles:
<pre>
&nbsp;&nbsp;&nbsp; # build bytecode ensemble
&nbsp;&nbsp;&nbsp; # directory: ensemble\def
&nbsp;&nbsp;&nbsp; nmake -f Makefile.nt depend
&nbsp;&nbsp;&nbsp; nmake -f Makefile.nt
</pre>
<ul>
<pre>
# build ensemble demos
# directory: ensemble\demo
nmake -f Makefile.nt</pre>
</ul>
If all went smoothly, the initial installation is now complete.
<p>
<a NAME="winnt-run"></a>
<h3>How to run applications</h3>
<p>
You can now refer to the file <b>ensemble\doc\tut.ps</b> for
instructions on executing the demo applications. This involves
setting a few environment variables and then executing the
applications.
<p>
<a NAME="winnt-native"></a>
<h3>Building the native code version for Windows NT</h3>
<p>
You can also compile everything to run on the native instruction set
of your computer instead of using an interpreter. This will run
faster.
<p>
To use the native code version of Ensemble, compile it in the
directory, <b>ensemble\opt</b>.  This step compiles all of the
Ensemble sources and will take awhile. This is also where you build
the native code versions of the HOT tools.  <b>*NOTE*</b> You must
make sure that the Microsoft executables, <b>masm.exe</b> and
<b>ml.exe</b> are installed and in your path.
<p>
In order to compile the HOT tools, you would do the following:
<pre>
&nbsp;&nbsp;&nbsp; # build native code libraries in opt directory
&nbsp;&nbsp;&nbsp; # directory: ensemble\opt
&nbsp;&nbsp;&nbsp; nmake -f Makefile.nt depend
&nbsp;&nbsp;&nbsp; nmake -f Makefile.nt
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # change directory to demo and build native code demo programs
&nbsp;&nbsp;&nbsp; # directory: ensemble\demo
&nbsp;&nbsp;&nbsp; nmake -f Makefile.nt depend
&nbsp;&nbsp;&nbsp; nmake -f Makefile.nt socketopt
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # change back to opt and build the HOT tools
&nbsp;&nbsp;&nbsp; # directory: ensemble\opt
&nbsp;&nbsp;&nbsp; nmake -f Makefile.nt hot
</pre>
Once you have built the HOT tools, there will be 3 executable files
placed in the ensemble\demo directory: <b>hot_test.exe,
hot_testo.exe</b>, and <b>outboard.exe</b>. The file hot_test.exe
runs basic single-process sanity checks of the HOT C / Ensemble
interface. The files hot_testo.exe ("o" is for outboard) and
outboard.exe perform the same sanity checks, however, the Ensemble
protocols are isolated in a separate process (outboard.exe) and
communication takes place via TCP sockets. The hot library file,
<b>ensemble\lib\nt\libhot.a</b> will be placed in the ensemble\lib\nt
directory. You will need to link this hot library with your own
"C" applications.
<p>
There is also an auxilliary HOT test program, called hot_test2.c, which
can be compiled as follows:
<pre>
&nbsp;&nbsp;&nbsp; # build the hot_test2 demo program
&nbsp;&nbsp;&nbsp; # directory: ensemble\opt
&nbsp;&nbsp;&nbsp; nmake -f Makefile.nt hot_test2
</pre>
This will build and install the program <b>hot_test2.exe</b> in the demo
directory. The program hot_test2 is a two-process RPC performance
test.
<p>
In order to run hot_testo.exe, you <i>first </i>have to set environment
variables. This is done through the Control Panel, by selecting the System
icon, and then selecting the Environment tab. You then enter the environment
variable <b>ENS_OUTBOARD</b> and for its value, you enter the complete
path to the outboard.exe file, e.g.:
<p>
ENS_OUTBOARD
<p>
c:\ensemble\demo\outboard.exe
<p>
Then select "Set" and "OK". The Environment data entry window will
close. You may now open a MS DOS Console window and run
hot_testo.exe.
<p>

The HOT tools can also be built with cryptographic support as
follows.  First you will need to edit the file,
<b>ensemble\mk\config.nmk</b>, and uncomment the <b>CRYPTO_LINK</b>
lines. Then perform the following at the command line:
<pre>
&nbsp;&nbsp;&nbsp; # build crypto library
&nbsp;&nbsp;&nbsp; # directory: ensemble\opt
&nbsp;&nbsp;&nbsp; nmake -f Makefile.nt crypto
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # build HOT tools with crypto support
&nbsp;&nbsp;&nbsp; # directory: ensemble\opt
&nbsp;&nbsp;&nbsp; nmake -f Makefile.nt libhot-crypto
</pre>
This will build versions of the hot_tests and outboard executables with
a "-crypto" extension and place them in the demo directory.
<p>
<a NAME="winnt-maestro"></a>
<h3>Building the <a href="http://www.cs.cornell.edu/Info/Projects/Ensemble/Maestro/Maestro.html">Maestro</a>
tools for Windows NT</h3>
<p>
<b>**NOTE**</b>The Maestro IIOP software, built when compiling
on Unix, has not yet been ported to NT.
<br>You need to have compiled the HOT library before compiling the <a href="http://www.cs.cornell.edu/Info/Projects/Ensemble/Maestro/Maestro.html">Maestro</a>
C++ interface. This step generates the file <b>ensemble\maestro\maestro-nt\libmae-nt.lib</b>
as well as the maestro test programs:
<pre>
&nbsp;&nbsp;&nbsp; # build the Maestro tools
&nbsp;&nbsp;&nbsp; # directory: ensemble\opt
&nbsp;&nbsp;&nbsp; nmake -f Makefile.nt maestro-nt
</pre>
You should now have three test programs:
<ul>
<li>
<b>ensemble\maestro\maestro-nt\maestro_test.exe</b>
<li>
<b>ensemble\maestro\maestro-nt\maestro_perf.exe</b>
<li>
<b>ensemble\maestro\maestro-nt\group.exe</b>
</ul>
<b>maestro_test</b> is a single process sanity test in which several
group-member objects are created which then randomly send messages
and leave/rejoin the group. <b>maestro_perf</b> is a two-process RPC
performance test.  group is an application which tests the <b>new,
simpler</b> state transfer algorithm. To get started with Maestro and
Ensemble, we recommend you read the <a
href="http://www.cs.cornell.edu/Info/Projects/Ensemble/Maestro/Maestro.html">Maestro
documentation</a> and start from the test programs (in the
corresponding .C files) -- you can modify and experiment with them.
<p>
<a NAME="nt-java"></a>
<h3>Building the EJava Interface for Windows NT</h3>
<p>
The EJava interface to Ensemble was built and tested using Sun Microsystem's
<b>JDK1.2</b>.
Before trying to build this interface, please check and make sure you have
access to JDK1.2. Then follow these steps:
<pre>
&nbsp;&nbsp;&nbsp; # build the EJava interface
&nbsp;&nbsp;&nbsp; # directory: ensemble\ejava
&nbsp;&nbsp;&nbsp; nmake -f Makefile.nt
</pre>
You can then run one of the demo programs, EnsDemoOutboard or ThreadTest
as follows:
<pre>
&nbsp;&nbsp;&nbsp; java EnsDemoOutboard
</pre>
EnsDemoOutboard is a graphical version of the mtalk demo. It allows
processes to "chat" to each other. The demo application, ThreadTest, is
a test which stresses multi-threading. It requires one parameter,
the number of group members to wait for before beginning the test.
For example, to run the test with 2 members, start the test on 2 machines
(or 2 consoles) as follows:
<pre>
&nbsp;&nbsp;&nbsp; java ThreadTest 2
</pre>
<p>
<a NAME="nt-java"></a>
<h3>Installation is complete</h3>
<p>
This concludes the instructions for building Ensemble on Windows NT systems.
<br>
<a href="#installation">Back to installation guide.</a>
<hr>
<a NAME="unix-install"></a>
<h2>Building Ensemble on Unix Systems</h2>
<p>
<b>**NOTE**</b> This distribution of Ensemble requires users to build
the bytecode libraries - they are not supplied pre-compiled as with previous
distributions. Directions to do so are included below. Some demonstration
applications have been provided which you can use to test the distribution
once the first parts are installed.
<p>
You can also compile everything to run on the native instruction set
of your computer instead of using an interpreter. This will run faster.
You can also use a special Socket library to improve the performance of
network operations. Details on how to build all of these things are given
below.
<p>
<a NAME="unix-demo"></a>
<h3>Building on Unix Systems</h3>
<p>
First, make sure the <b>CAMLLIB</b> environment variable is set, and the
Ocaml binaries are accessible from your PATH. Then compile the Ensemble
system and demonstration programs as follows (on UNIX, the make automatically
builds the demo programs):
<pre>
&nbsp;&nbsp;&nbsp; # make the Ensemble system
&nbsp;&nbsp;&nbsp; # directory: ensemble/def
&nbsp;&nbsp;&nbsp; make
</pre>
If all went smoothly, the initial installation is now complete, and you
can try out the demo programs following the instructions below.
<p>
<a NAME="unix-run"></a>
<h3>How to run applications</h3>
<p>
You can now refer to the tutorial, <b>ensemble/doc/tut.ps</b>, for instructions
on executing the demo applications. This involves setting a few environment
variables and then executing the applications. Come back to here to install
additional parts of Ensemble.
<p>
<a NAME="unix-tk"></a>
<h3>Graphical Demos</h3>
<p>
<b>If you installed the O'caml Tcl/Tk interface</b>, compile the white
board demo and "Game of Life" demo. (Note: In order to use the Tcl/Tk interface
you may need to set the TKLIB macro in <b>ensemble/mk/config.mk</b> and you
must have installed the camltk41 libraries). These applications will
not compile if the Ocaml TK interface has not been installed.
<pre>
&nbsp;&nbsp;&nbsp; # make the Ensemble tk library
&nbsp;&nbsp;&nbsp; # directory: ensemble/def
&nbsp;&nbsp;&nbsp; make tk
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # make the white board demo
&nbsp;&nbsp;&nbsp; # directory: ensemble/demo/tk
&nbsp;&nbsp;&nbsp; make
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # make the game-of-life demo
&nbsp;&nbsp;&nbsp; # directory: ensemble/demo/life
&nbsp;&nbsp;&nbsp; make
</pre>
<a NAME="unix-env"></a>
<h3>Environment variables</h3>
<p>
In order to compile platform-dependent parts (the Socket library, the native
code, the HOT C interface, and the Maestro C++ interface) some configuration
needs to be done.
<ul>
<li>
If you are running on a system where the environment variables <b>ENS_MACHTYPE
</b>and
<b>ENS_OSTYPE</b>
are not automatically defined then you should set these to appropriate
values for your platform. These environment variables are only used in
naming files and do not affect compilation. To be compatible with naming
of the platform-dependent libraries we distribute, you should use values
such as these:
<li>
<b>ENS_MACHTYPE : sparc, i386, rs6000, alpha, ...</b>
<li>
<b>ENS_OSTYPE : sunos4, solaris, aix, linux, osf1, ...</b>
<p>
In <b>sh</b>, you set them like this:
<pre>
&nbsp;&nbsp;&nbsp; ENS_MACHTYPE=i386
&nbsp;&nbsp;&nbsp; export ENS_MACHTYPE
&nbsp;&nbsp;&nbsp; ENS_OSTYPE=linux
&nbsp;&nbsp;&nbsp; export ENS_OSTYPE
</pre>
<li>
Make sure the Ocaml binaries are in your <b>PATH</b>.
<li>
Set the <b>CAMLLIB</b> environment variable to the directory where you
installed the O'Caml libraries. O'Caml will give you the correct value
for this if you type:
<pre>
&nbsp;&nbsp;&nbsp; % ocamlc -v
&nbsp;&nbsp;&nbsp; The Objective Caml compiler, version 3.02
&nbsp;&nbsp;&nbsp; Standard library directory: /usr/local/lib/ocaml
</pre>
The second line printed out by this is the location where O'Caml installed
the libraries. In sh, you set the CAMLLIB variable like this:
<pre>
&nbsp;&nbsp;&nbsp; CAMLLIB=/usr/local/lib/ocaml
&nbsp;&nbsp;&nbsp; export CAMLLIB
</pre>
We recommend you add these to your '.tcshrc' or equivalent for your shell.
</ul>
<a NAME="unix-socket"></a>
<h3>Building the Socket library</h3>
<p>
The Socket library supports extensions to the Unix library concerned with
communication. It is derived in large part from the O'Caml Unix library.
It is not necessary on Unix (the O'Caml Unix library is used by default),
but using the Socket library increases Ensemble performance and decreases
memory usage. Note that you only need to compile this separately if you
are using the bytecode version of Ensemble. The build for the native code
system compiles the Socket library by default.
<pre>
&nbsp;&nbsp;&nbsp; # In ensemble/mk/config.mk, edit the macro definition for HSYS_TYPE to be "skt".
&nbsp;&nbsp;&nbsp; # directory: ensemble/def
&nbsp;&nbsp;&nbsp; make depend
&nbsp;&nbsp;&nbsp; make 
</pre>
When you compile other parts of Ensemble in the future, the Socket library
will be used in place of the Unix library.
<p>
<a NAME="unix-hot"></a>
<h3>Building the HOT tools</h3>
<p>
The HOT tools can be compiled from either the bytecode or native code version
of Ensemble. Compiling from <b>ensemble/def</b> builds the bytecode version.
Compiling from 'ensemble/opt' builds the native version. Either way the
C library file that is generated is platform dependent.
<p>
This step generates the file <b>ensemble/lib/PLATFORM/libhot.a</b>
(where PLATFORM is the name of your platform) and installs the HOT library
files into 'ensemble/lib/PLATFORM'.
<p>
<b>**NOTE**</b>For users on SunOS, lacking Solaris threads, 
see the section below on POSIX threads. You
will have to obtain this threads package, install it, and modify the
<b>ensemble/mk/config.mk</b> file to reference the corresponding
threads interface file (perhaps or <b>pthread_intf.c</b>).
<pre>
&nbsp;&nbsp;&nbsp; # build the HOT tools
&nbsp;&nbsp;&nbsp; # directory: ensemble/def (or ensemble/opt)
&nbsp;&nbsp;&nbsp; make hot
</pre>
There is also an auxilliary HOT test program, called hot_test2.c, which
can be compiled as follows:
<pre>
&nbsp;&nbsp;&nbsp; # build the hot_test2 demo program
&nbsp;&nbsp;&nbsp; # directory: ensemble/def
&nbsp;&nbsp;&nbsp; make hot_test2
</pre>
This will build and install the program <b>hot_test2</b> in the demo
directory. The program hot_test2 is a two-process RPC
performance test.  <br>The HOT tools can also be built with
cryptographic support as follows. First you will need to edit
the file, <b>ensemble/mk/config.mk</b>, and uncomment the
<b>CRYPTO_LINK</b> lines. Then perform the following at the
command line:
<pre>
&nbsp;&nbsp;&nbsp; # build the HOT tools with crypto
&nbsp;&nbsp;&nbsp; # directory: ensemble/def (or ensemble/opt)
&nbsp;&nbsp;&nbsp; make libhot-crypto
</pre>
This will install the hot_test-crypto, hot_testo-crypto and outboard-crypto
files in the demo directory.
<p>
<a NAME="unix-maestro"></a>
<h3>Building the <a href="http://www.cs.cornell.edu/Info/Projects/Ensemble/Maestro/Maestro.html">Maestro</a>
tools</h3>
<p>
You need to have compiled the HOT library before compiling the <a href="http://www.cs.cornell.edu/Info/Projects/Ensemble/Maestro/Maestro.html">Maestro</a>
C++ interface. You need a C++ compiler in order to compile Maestro. This
step generates the file <b>ensemble/maestro/conf/PLATFORM/libmae.a</b>
(where platform is the name of your platform).
<pre>
&nbsp;&nbsp;&nbsp; # build the Maestro and IIOP libraries and utilities
&nbsp;&nbsp;&nbsp; # directory: ensemble/def
&nbsp;&nbsp;&nbsp; make maestro
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # build the Maestro and IIOP test applications
&nbsp;&nbsp;&nbsp; # directory: ensemble/def
&nbsp;&nbsp;&nbsp; make maestro_test
</pre>
(**NOTE** You can also run "make" in the maestro directory)
<p>
You should now have five test programs,
<ul>
<li>
<b>ensemble/maestro/test/maestro-test</b>
<li>
<b>ensemble/maestro/test/maestro-perf</b>
<li>
<b>ensemble/maestro/test/test-replicated</b>
<li>
<b>ensemble/maestro/test/test-simple</b>
<li>
<b>ensemble/maestro/test/group</b>
</ul>
<b>maestro-test</b> is a single process sanity test in which several
group-member objects are created which then randomly send messages
and leave/rejoin the group.  <b>maestro-perf</b> is a two-process RPC
performance test.  Both test-replicated and test-simple are Maestro
IIOP test applications. group is an application which tests the
<b>new, simpler</b> state transfer algorithm. See
ensemble/maestro/REF.ps for more information on the Maestro IIOP
tools. To get started with Maestro and Ensemble, we also recommend
you read the <a
href="http://www.cs.cornell.edu/Info/Projects/Ensemble/Maestro/Maestro.html">Maestro
documentation</a> and start from the test programs (in the
corresponding .C files) -- you can modify and experiment with them.
<p>
<a NAME="unix-native"></a>
<h3>Building the native code version</h3>
<p>
To use the native code version of Ensemble, compile it in the directory
<b>ensemble/opt</b>. This is also where you build the native code versions of
the HOT tools. Note that this automatically compiles the native code Socket
library for you. This step compiles all of the Ensemble sources (including
the demos) and will take awhile.
<pre>
&nbsp;&nbsp;&nbsp; # build native code libraries
&nbsp;&nbsp;&nbsp; # directory: ensemble/opt
&nbsp;&nbsp;&nbsp; make depend
&nbsp;&nbsp;&nbsp; make
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # build the HOT tools for native code
&nbsp;&nbsp;&nbsp; # directory: ensemble/opt
&nbsp;&nbsp;&nbsp; make hot
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # build the Maestro and IIOP libraries and utilities
&nbsp;&nbsp;&nbsp; # directory: ensemble/opt
&nbsp;&nbsp;&nbsp; make maestro
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # build the Maestro and IIOP test applications
&nbsp;&nbsp;&nbsp; # directory: ensemble/opt
&nbsp;&nbsp;&nbsp; make maestro_test
</pre>
<p>
<a NAME="unix-java"></a>
<h3>Building the EJava Interface</h3>
<p>
The EJava interface to Ensemble was built and tested using Sun Microsystem's
<b>JDK1.2</b>.
Before trying to build this interface, please check and make sure you have
access to JDK1.2. Then follow these steps:
<pre>
&nbsp;&nbsp;&nbsp; # build the EJava interface
&nbsp;&nbsp;&nbsp; # directory: ensemble/ejava
&nbsp;&nbsp;&nbsp; make
</pre>
You can then run one of the demo programs, EnsDemoOutboard or ThreadTest
as follows:
<pre>
&nbsp;&nbsp;&nbsp; java EnsDemoOutboard
</pre>
EnsDemoOutboard is a graphical version of the mtalk demo. It allows
processes to "chat" to each other. The demo application, ThreadTest,
is a test which stresses multi-threading. ThreadTest, requires one
parameter, the number of group members to wait for before beginning
the test.  For example, to run the test with 2 members, start the
test on 2 machines (or 2 consoles) as follows:
<pre>
&nbsp;&nbsp;&nbsp; java ThreadTest 2
</pre>
<p>
<a NAME="nt-java"></a>
<h3>Installation is complete</h3>
<p>
This concludes the instructions for building Ensemble on Unix systems.
<br>
<a href="#installation">Back to installation guide.</a>
<hr>
<h2>"Contrib" Code Removed, Packaged Separately</h2>
<p>
With Ensemble version 1.10, we only include the Ensemble core
toolkit. All other contributed work will be available separately by
request. Separate tar (or zip) files will be generated for the add-on
work, including the <b>Dynamic Virtual Private Network (DVPN)</b>
code, the <b>rvr_threads</b> package, and the <b>exec-server</b>. 
These add-ons will be available upon request.
<br>
<p>
<h2>Java Interface Updated</h2>
<p>
Due to popular demand, the Ensemble Java interface, Ejava, is now
included in the core Ensemble release. The interface and demo
programs can be found in the ensemble/ejava directory. The ejava
interface has been updated with new functions to allow it to
inter-operate with HOT "C"/Maestro applications. See the
<b>RELEASE_NOTES</b> for more information.
<p>
<b>NOTE:</b>This Java interface was developed using <b>Sun
Microsystem's JDK 1.2.</b> Other versions of Java or earlier versions
of the JDK may not work properly. It also works with the newer version 1.3.
<p>
<hr>
<a NAME="multiple-platforms"></a>
<h2>Building Ensemble on Multiple Platforms</h2>
<p>
Multiple versions of Ensemble can co-exist within the same directory
tree.  All platform-dependent files now have a separate directory
describing the platform for which they were compiled. For Unix
platforms, you just need to ensure that the <b>ENS_MACHTYPE</b> and
<b>ENS_OSTYPE</b> environment variables are correctly set. For Windows
NT, the name of the platfrom ('nt') is embedded in the Windows NT
makefiles and does not need to be set. For instance, the
platform-independent bytecode library for Ensemble is called
'libens.cma' ('cma' is the O'Caml suffix used for bytecode
libraryies). The platform-dependent, native code library for Ensemble
on i386, Linux platforms is called
'<b>lib/i386-linux/libens.cmxa</b>' ('cmxa' is the O'Caml suffix for
native code libraries).
<p>
The only exceptions are the demo programs. These are platform independent
but do not follow the naming convention. Whenever you compile executables
for a new platform, the old executable demos are removed and replaced with
the new ones.
<p>
This concludes the instructions for building Ensemble on multiple platforms.
<br><a href="#installation">Back to installation guide.</a>
<br>
<h2>"Make Clean" Changes for Removing Object Files/Executables</h2>
<p>
Since the directory tree has changed to accomodate platform-specific
builds, the behavior of the Make command, "<b>make clean</b>" (or
"nmake -f Makefile.nt clean" on NT) has changed as well. Now, "make
clean" from the top-level directory (ensemble) will call "make clean"
in each of the <b>ensemble/def</b> and <b>ensemble/opt</b>
directories. "make clean" in each of these directories will remove
the <b>platform-specific</b> object code directories,
e.g. <b>def/obj/sparc-solaris</b>, as well as the platform-specific
library files, e.g: <b>ensemble/lib/sparc-solaris</b>, the compiled
demo programs, and the compiled platform-specific maestro files,
e.g. <b>ensemble/maestro/conf/sparc-solaris</b>.
<p>
The command "<b>make realclean</b>" will attempt to perform the "make
clean" operations <b>ON ALL PLATFORMS</b>, e.g. sparc-solaris, linux,
and NT, and so is to be used only when cleaning up the entire
distribution directory of ALL compiled object files and executables.
<p>
<hr><a NAME="fsu-threads"></a>
<h2>POSIX threads</h2>
<p>
If your system does not have a native POSIX threads library, install the
FSU pthreads.tar.gz package. You can get it from:
<ul>
<li>
<a href="http://www.cs.fsu.edu/~mueller/pthreads/">http://www.cs.fsu.edu/~mueller/pthreads/
</a>(USA)
<li>
<a href="http://www.informatik.hu-berlin.de/~mueller/pthreads/">http://www.informatik.hu-berlin.de/~mueller/pthreads/</a>
(Europe)
</ul>
After installing the library. Update in <b>ensemble/mk/config</b> the
macros GTHREADS, GTHREADS_INC to point to your installation. If
necessary, add new HOT_CFLAGS_arch_os, HOT_MLLINK_arch_os,
HOT_LINK_arch_os, and HOT_THREAD_OBJ_arch_os macros to
<b>ensemble/mk/config.mk</b> for your platform (and send them to us
so we can add them to the next distribution).
<p>
<br><a
href="#installation">Back to installation guide.</a>
<p>
<a NAME="fsu-threads"></a>
<br>
<hr>
<h2>SECURITY</h2>
<p>
Ensemble version 1.10 supports several security properties, including user
message encryption, authentication, and group member
authorization. Ensemble requires the user to install <a href =
"http://web.mit.edu/network/pgp.html">PGP6.5</a>  and
<a href ="http://www.openssl.org/">OpenSSL0.9.5a</a>.
Previous version of PGP (2.6.3, 5.0) also work, however, we have
had correctness probelms with them. 
In order to make ensemble with cryptographic support, <b>FIRST, you
must edit mk/config.mk.</b> You will see the CRYPTO_LINK define commented
out by default. Comment out the top (empty) CRYPTO_LINK line and
uncomment the rest of the CRYPTO related lines. On NT, simply uncomment the
lines following the CRYPTO_LINK line. This will now link in the crypto
libraries when you build executables. Now perform the following steps:


Unix:
<pre>
&nbsp;&nbsp;&nbsp; # Make the regular crypto library
&nbsp;&nbsp;&nbsp; # directory: ensemble/def
&nbsp;&nbsp;&nbsp; make crypto
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # Make the demo's with the crypto library
&nbsp;&nbsp;&nbsp; # directory: ensemble/def
&nbsp;&nbsp;&nbsp; make
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # Make the optimized crypto library
&nbsp;&nbsp;&nbsp; # directory: ensemble/opt
&nbsp;&nbsp;&nbsp; make crypto
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # Make the demo's with the optimized crypto library
&nbsp;&nbsp;&nbsp; # directory: ensemble/opt
&nbsp;&nbsp;&nbsp; make
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # Make libhot with the optmized crypto library
&nbsp;&nbsp;&nbsp; # directory: ensemble/opt
&nbsp;&nbsp;&nbsp; make libhot-crypto
</pre>
<b>NOTE:</b> on NT, change "make" to:</pre>
"nmake -f Makefile.nt"
and things should compile smoothly.
<br>
<p>


<h2> NT not fully supported </h2>
Currently, cryptographic support is not perfect for NT, though we plan
to fully support it in the future. PGP works on both NT and unix,
however, Openssl does not work with Microsoft Visual Studio. 

<h2> Testing CRYPTO </h2> In order to check that your system can
use the various cryptographic libraries and interfaces, use the the
armadillo program in the demo directory. 

In order to set up PGP you'll need to use (at least) the following
command:
<pre>
&nbsp;&nbsp;&nbsp; pgp -kg
</pre>
This will generate a public/private key pair for a principal of your
choice. The key-pairs are stored in your home directory under the
subdirectory <i>.pgp</i>. Armadillo requires that the principals
<i>o1,o2</i> are installed. To see the set of principals you currently
use:
<pre>
&nbsp;&nbsp;&nbsp;pgp -kv
&nbsp;&nbsp;&nbsp;pub   512/2F045569 1998/06/15 o2
&nbsp;&nbsp;&nbsp;pub   512/A2358EED 1998/06/15 o1
&nbsp;&nbsp;&nbsp;2 matching keys found.
</pre

use:
<pre>
&nbsp;&nbsp;&nbsp; armadillo -prog pgp 
</pre>
To test the PGP interface. You should see something like:
<pre>
&nbsp;&nbsp;&nbsp;PGP works
&nbsp;&nbsp;&nbsp;check_background
&nbsp;&nbsp;&nbsp;got a ticket
&nbsp;&nbsp;&nbsp;background PGP works
</pre>

On NT, PGP only works in the foreground, in the background due to
socket select issues. 

If something is broken, trace the PGP execution using:
<pre>
&nbsp;&nbsp;&nbsp; armadillo -prog pgp -trace PGP 
</pre>
If more information is required use the flags:
<pre>
&nbsp;&nbsp;&nbsp;-trace PGP1 -trace PGP2
</pre>

For a wider scale test use the <i>exchange</i> program. This is a test
that creates a set of endpoints, with principal names: <i>o1, o2,
..</i>, and merges them securely together into one group. Each group
merge requires that group-leaders properly authenticate themselves
using PGP. The test is started with all members in components containing
themselves, and ends when a single secure component is created. 
Note that it will keep running until reaching the timeout. The timeout
is set by default to 20 seconds. 
To invoke the test do:
<pre>
&nbsp;&nbsp;&nbsp; armadillo -prog exchange -n 2 
</pre>
To use more endpoints, increase the <i>-n</i> command line argument,
and add more principals to your PGP database.

If something goes wrong, a trace of the authentication protocol is
available through <pre> -trace EXCHANGE</pre>. 


To test security with two separate processes do the following:
<pre>
&nbsp;&nbsp;&nbsp;#setup and run gossip
&nbsp;&nbsp;&nbsp;gossip &
&nbsp;&nbsp;&nbsp;#On one machine run:
&nbsp;&nbsp;&nbsp; mtalk -key 11112222333344441111222233334444 -add_prop Auth -pgp o1
&nbsp;&nbsp;&nbsp;#On a second machine run:
&nbsp;&nbsp;&nbsp; mtalk -key 01234567012345670123456701234567 -add_prop Auth -pgp o2
</pre>
The two mtalk processes should authenticate each other and merge.

The three command line arguments specify:
<ul>
  <li> -key 111122223333444111122223333444 : The initial security key of the
      system. Should be a 32 byte string.
  <li> -add_prop Auth: Add the authentication protocol.
      Otherwise, stacks with different keys will not be able to
      merge. 
  <li> -pgp o1: Specify the principal name for the system.
</ul>

<h2> Performance issues with PGP</h2>
The way Ensemble uses PGP is not very efficient at the
moment. However, this only effects authentication, which occurs rarely. 
Common operations such as Diffie-Hellman exchanges, symmetric encrtyption/decryption, and MD5 hashing are performed using the OpenSSL toolkit. 

<a href="#installation">Back to installation guide.</a>
</body>
</html>
