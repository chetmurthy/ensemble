<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
<title>Ensemble Installation Instructions</title>
</head>
<body text="#000000" bgcolor="#FFFFFF">

<center>
<h1>Ensemble 1.42</h1></center>

<center><h2>
Release Notes and Installation Instructions
</h2></center>

<center>Copyright &copy;1997 Cornell University, Ithaca, NY, USA,
Hebrew University 2000, Jerusalem Israel, 
IBM Israel Science and Technology 2002
<br>All rights reserved.</center>

<br><i>Maintainer</i>:
<a href="mailto:orodeh@il.ibm.com">Ohad Rodeh</a>,
<hr><a NAME="intro"></a>
<h2>Introduction</h2>
<p>
Thank you for choosing Ensemble as your message transport system. Its
platform independence allows you to interconnect a wide range of
computing environments.
<p>
The following instructions guide you through the process of installing
Ensemble. Click on the hypertext links for the details about each step.
The installation instructions are designed to be as simple as possible.
However, please read them through carefully before starting and follow
them carefully. Also, please read the file <b>RELEASE_NOTES</b> for
the latest information on this release.
<p>
These installation instructions are aimed at getting Ensemble up and
running on your system as quickly as possible. After successfully
installing the system, you may wish to compile Ensemble for the
native instruction set of your computer. The difference is
only significant when Ensemble is used in high-performance settings.

<p>
<hr>
<a NAME="software"></a>
<h2>Required Software</h2>
<p>
To compile Ensemble you need <b>Version 3.06</b> of the Objective
Caml (O'Caml) compiler. For unix systems, you also need the make
version by GNU, also known as GNU-make. For windows, you'll need the
Visual Studio compiler verion 6 and the nmake tool.

<p>
O'Caml is freely available via the World Wide Web at <b><a
href="#ocaml">http://caml.inria.fr/ocaml/</a></b>.  Please ensure
you have the correct version. See the instructions below on how to
obtain it. This is a different compiler version than required by
previous versions of Ensemble! Version 0.40 of Ensemble used
ocaml-1.05; Version 0.50 of Ensemble used ocaml-1.07; version 0.60
used ocaml-2.01; and we are now up to ocaml-3.06.
<p>
On Unix platforms, to compile the HOT C interface, you need a POSIX
compliant threads package. (On Solaris and HPUX you can use the native
threads library). 
To compile the <a
href="http://www.cs.cornell.edu/Info/Projects/Ensemble/doc/Maestro/Maestro.html">Maestro</a>
tools C++ interface, you will need a C++ compiler. We use the
Microsoft C++ compiler on WIN32 and gcc on Unix platforms, but
other compilers should work. On windows to build the optimized versions of
HOT C and Maestro, you will also need the masm (MS Compatibility
Driver) and ml (MS Macro Assembler) executables installed and located
in your path.
<p>
<hr>
<a NAME="licensing"></a>
<h2>Licensing</h2>
<p>
Ensemble code has a BSD-type license. It is copyrighted by Cornell,
the Hebrew universitie, and IBM research. Ensemble is freely available software,
but you must agree to the terms of the license before you can install
it. We ask that you read the licensing agreement before installing
Ensemble.  It can be found in <b>ensemble/LICENSE</b>.
<p>
<hr>

<a NAME="installation"></a>
<h2>Installation</h2>

In order to compile the system you'll need to setup some environment
variables. These will help tell the build-scripts which operating
system you're using and where to find the OCaml libraries. 

<ul>
  <li>
      Set the environment variables <b>ENS_MACHTYPE
      </b>and <b>ENS_OSTYPE</b>.
      These environment variables are only used in
      compilation as well as in file naming, therefore, it is important to
      set them correctly. On some architectures, the variables MACHTYPE and
      OSTYPE are predefined. To be compatible with naming
      of the platform-dependent libraries we distribute, you should use values
      such as these: 
  <li>
      <b>ENS_MACHTYPE : sparc, i386, rs6000, alpha, ...</b>
  <li>
      <b>ENS_OSTYPE : solaris, aix, hpux, linux, osf1, ...</b>
      <p>
      On WIN32 the configuration files already set the PLATFORM to nt.
      Make sure that these variables are set correctly, values such as i686
      are not handled correctly by the makefiles. With a Pentium processor,
      make sure to set the ENS_MACHTYPE to i386, and not i486/i586/i686.
      
      In <b>sh</b>, you set them like this:
      <pre>
      &nbsp;&nbsp;&nbsp; ENS_MACHTYPE=i386
      &nbsp;&nbsp;&nbsp; export ENS_MACHTYPE
      &nbsp;&nbsp;&nbsp; ENS_OSTYPE=linux
      &nbsp;&nbsp;&nbsp; export ENS_OSTYPE
      </pre>
  <li>
      Make sure the Ocaml binaries are in your <b>PATH</b>.
  <li>
      Set the <b>OCAMLLIB</b> environment variable to the directory where you
      installed the O'Caml libraries. O'Caml will give you the correct value
      for this if you type:
      <pre>
      &nbsp;&nbsp;&nbsp; % ocamlc -v
      &nbsp;&nbsp;&nbsp; The Objective Caml compiler, version 3.06
      &nbsp;&nbsp;&nbsp; Standard library directory: /usr/local/lib/ocaml
      </pre>
      The second line printed out by this is the location where O'Caml installed
      the libraries. In sh, you set the OCAMLLIB variable like this:
      <pre>
      &nbsp;&nbsp;&nbsp; OCAMLLIB=/usr/local/lib/ocaml
      &nbsp;&nbsp;&nbsp; export OCAMLLIB
      </pre>
      We recommend you add these to your '.tcshrc' or equivalent for your shell.

      If you have some other version, then obtain version 3.06 and install
      it.  O'Caml is freely available from <a
      href="http://caml.inria.fr/ocaml">http://caml.inria.fr/ocaml</a>
      and is easy to install (precompiled binaries are available for
      Windows NT). You do not need the native code compiler, although you
      can compile Ensemble with it.
</ul>

<p> Install Ensemble by following the step-by-step instructions. You
need to get the O'Caml compiler, <a href="#download">extract</a> the
Ensemble software, and then compile the portions you wish to
use. Installation for WIN32 and Unix platforms is similar, the
difference being that on windows one needs to use 'nmake -f
Makefile.nt' instead of 'make'.

<a NAME="download"></a>
<h2>How to download and extract the Ensemble software</h2>
<p>
Download Ensemble from <a href="http://www.cs.cornell.edu/Info/Projects/Ensemble/ftp.html">http://www.cs.cornell.edu/Info/Projects/Ensemble/ftp.html</a>.
Ensemble is no longer encrypted. Simply unzip and untar the distribution.
It will put the sources in a directory called "ensemble". On Windows NT
you can use the winzip program. On Unix platforms, do it this way:
<pre>
&nbsp;&nbsp;&nbsp; # uncompress and untar the distribution
&nbsp;&nbsp;&nbsp; gunzip ensemble-1_0.tar.gz
&nbsp;&nbsp;&nbsp; tar xvf ensemble.tar
</pre>
<p>
<hr>

<h2>Building Ensemble</h2>
Ensemble is supported on Unix (and Unix like systems), and win32
platforms. It is tested mainly on Linux and WinXP, but also on
sparc-solaris, HP-UX, NT4, WIN2000.

<p>
Compile the Ensemble system and demonstration programs as follows:
<pre>
&nbsp;&nbsp;&nbsp; # make the Ensemble system dependencies
&nbsp;&nbsp;&nbsp; # directory: ensemble
&nbsp;&nbsp;&nbsp; make depend
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # make the system
&nbsp;&nbsp;&nbsp; make all
</pre>
If all went smoothly, the initial installation is now complete, and you
can try out the demo programs following the instructions below.
You can also compile for your native instruction set. <a
href="#native">instruction set</a>. In order to
clean up the object files do:
<pre>
&nbsp;&nbsp;&nbsp; # clean up
&nbsp;&nbsp;&nbsp; # directory: ensemble
&nbsp;&nbsp;&nbsp; make clean
</pre>
This will leave only the binaries (in bin/PLATFORM) and libraries (in lib/PLATFORM).

<p> The build process automatically builds CE, HOT, and
Maestro. Cejava requires Java installed and is therefore optional. To
see the details for the rest of the optional packages read further
down.

<p>
<h3>How to run applications</h3>
<p>
You can now refer to the tutorial, <b>ensemble/doc/tut.pdf</b>, for instructions
on executing the demo applications. This involves setting a few environment
variables and then executing the applications. Come back to here to install
additional parts of Ensemble.


<hr>
<p>
<a NAME="tk"></a>
<h3>Graphical Demos using the OCaml Tcl/Tk interface</h3>
<p>Previously, the Tcl/Tk caml library was distributed separately from
the compiler. However, it now comes with the main distribution, under
the name LablTk. You'll need this library for building the 
whiteboard and game-of-life demos. Both can be found in the demo subdirectory.

<p>
Compile the white board demo and "Game of Life" demo.  <i>Note</i>:
your platform must support the LablTk library. These applications will
not compile if the Ocaml TK interface has not been installed.
<pre>
&nbsp;&nbsp;&nbsp; # make the Ensemble tk library
&nbsp;&nbsp;&nbsp; # directory: ensemble
&nbsp;&nbsp;&nbsp; make tk
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # make the white board demo
&nbsp;&nbsp;&nbsp; # directory: ensemble/demo/tk
&nbsp;&nbsp;&nbsp; make
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # make the game-of-life demo
&nbsp;&nbsp;&nbsp; # directory: ensemble/demo/life
&nbsp;&nbsp;&nbsp; make
</pre>
To make the optimized version of the tk library do 'make tk_opt'.

<a NAME="socket"></a>
<h3>Using the "Unix" library instead of the default Socket library</h3>
<p>
The Socket library supports extensions to the Unix library concerned with
communication. Strictly speaking, the optimized socket library is not
necessary, because the basic communication functionality comes with
OCAML. However, it contains many features not found in the basic Caml
library: IP-multicast, handling C iovecs, and more.
Using the Socket library increases Ensemble performance and decreases
memory usage. The default is to use it, however, if you wish to use
something safer, you can use the "unix" library, which is the simple
non-optimized interface to the Caml Unix interface. 
<pre>
&nbsp;&nbsp;&nbsp; # In ensemble/mk/config.mk, edit the macro definition for HSYS_TYPE to be "unix".
&nbsp;&nbsp;&nbsp; # directory: ensemble
&nbsp;&nbsp;&nbsp; make depend
&nbsp;&nbsp;&nbsp; make all
</pre>

<p>
<a NAME="ce"></a>
<h3> The native C interface (CE)</h3>
The native C interface is automatically built as part of the build
process. There is no need for special actions on the user part.
The source files are in directory <b>ce</b>, 
a tutorial appears as a chapter in the doc/tut.pdf.
Documentation for the header files appears under 'doc/ce' as well.
The build process generates the file
<b>ensemble/lib/PLATFORM/libce.so</b>
(where PLATFORM is the name of your platform) and installs the CE library
files into 'ensemble/lib/PLATFORM'. The demos are installed in
'ensemble/bin/PLATFORM'.

We are now using dynamic linking for the native interface, this
requires the ensemble/lib/PLATFORM directory to be in your load path.
On Unix this requires setting the LD_LIBRARY_PATH, on windows this
requires adding it to the path. Note that on win32 you'll need to link
your application with libce.lib, while the real DLL is libce.dll. 

<a NAME="cejava"></a>
<h3>Building the CEJava Interface</h3>
<p> CEJava was built and tested using Sun Microsystem's <b>JDK1.4</b>
using the. CEJava provides an API similar to CE in the Java programming
language, with performance similar to CE. This is achieved by hooking
up the CE-calls directly to Java by means of the Java Native Interface
(JNI).

To build cejava you will need to first setup the </b>JAVA_HOME</b> environment
variable to point to the root of the JAVA distribution. Then do:
<pre>
&nbsp;&nbsp;&nbsp; # directory: ensemble/cejava
&nbsp;&nbsp;&nbsp; make all
</pre>
The build process generates the file
<b>ensemble/lib/PLATFORM/libcejava.so</b>
(where PLATFORM is the name of your platform) and installs the CE
library files into 'ensemble/lib/PLATFORM'. The demos are installed in
'ensemble/bin/PLATFORM/java_demo'. Since Java will try to dynamically
link with <b>libcejava.so</b> you will need to add the
ensemble/lib/PLATFORM directory to you load path. On Unix this
requires setting the LD_LIBRARY_PATH, on windows this requires adding
it to the path. Note that on win32 you'll need to link your
application with libce.lib, while the real DLL is libce.dll. You'll
also need to set the CLASSPATH environment variable to include the
<code>ensemble.jar</code> file that is located in
<code>ensemble/lib/PLATFORM</code>. The CLASSPATH is the list of
directories searched by java for its libraries and classes. A
resonable setting is
<pre>
&nbsp;&nbsp;&nbsp; CLASSPATH=".:ensemble/lib/PLATFORM/ensemble.jar"
&nbsp;&nbsp;&nbsp; export OCAMLLIB
</pre>
On win32 this will be: 
<pre>
&nbsp;&nbsp;&nbsp; CLASSPATH=".;ensemble\lib\PLATFORM\ensemble.jar"
</pre>

<a NAME="hot"></a>
<h3>Building the HOT tools</h3>
<p>
The Horus Object Tools (HOT) is a legacy interface that is used to
support applications written for Ensemble's predecessor -- Horus. We
still support HOT but encourage you to migrate to the newer CE API. 

<p> The HOT library is automatically built as part of the build
process. The build process generates the file
<b>ensemble/lib/PLATFORM/libhot.a</b>
(where PLATFORM is the name of your platform) and installs the HOT library
files into 'ensemble/lib/PLATFORM'. The <b>hot_test</b> program is installed in
'ensemble/bin/PLATFORM'.

<p>
There are auxilliary HOT test programs, which
can be compiled as follows (for case of the hot_test2 demo):
<pre>
&nbsp;&nbsp;&nbsp; # build the hot_test2 demo program
&nbsp;&nbsp;&nbsp; # directory: ensemble/hot
&nbsp;&nbsp;&nbsp; make hot_test2 
</pre>
This will build and install the program <b>hot_test2</b> in the hot
directory. The program hot_test2 is a two-process RPC
performance test.  <br>The HOT tools can also be built with
cryptographic support as follows. First you will need to edit
the file, <b>ensemble/mk/config.mk</b>, and uncomment the
<b>CRYPTO_LINK</b> lines. You also need to edit the
<b>ensemble/hot/Makefile</b> and modify the CLIBS and CRYPTO_CLIBS 
variables as shown in the makefile. Then goto the top level directory
and recompile.

<p>
<a NAME="maestro"></a>
<h3>Building the <a
href="http://www.cs.cornell.edu/Info/Projects/Ensemble/doc/Maestro/Maestro.html">Maestro</a>
tools</h3>
<p>
Maestro is a legacy C++ API that we are still supporting. However, we
discourage its use and encourage you to use the newer CE API. 

The Maestro library is automatically built as part of the build
process after HOT. HOT is a prerequisit for Maestro. You need a C++
compiler in order to compile Maestro. This step generates the file
<b>ensemble/maestro/conf/PLATFORM/libmae.a</b> (where platform is the
name of your platform). The <b>maestro-test</b> program is installed in
'ensemble/bin/PLATFORM'.

<pre>
&nbsp;&nbsp;&nbsp; # build the Maestro library and tests
&nbsp;&nbsp;&nbsp; # directory: ensemble/maestro
&nbsp;&nbsp;&nbsp; make 
</pre>

<p> You should now have three test programs, <ul>
  <li>
      <b>ensemble/maestro/test/maestro-test</b>
  <li>
      <b>ensemble/maestro/test/maestro-perf</b>
  <li>
      <b>ensemble/maestro/test/maestro-group-test</b>
</ul>
<b>maestro-test</b> is a single process sanity test in which several
group-member objects are created which then randomly send messages
and leave/rejoin the group.  <b>maestro-perf</b> is a two-process RPC
performance test.  Both test-replicated and test-simple are Maestro
IIOP test applications. <b>maestro-group-test</b> is an application which tests the
<b>new, simpler</b> state transfer algorithm. 
To get started with Maestro and Ensemble, we also recommend
you read the <a
href="http://www.cs.cornell.edu/Info/Projects/Ensemble/doc/Maestro/Maestro.html">Maestro
documentation</a> and start from the test programs (in the
corresponding .C files) -- you can modify and experiment with them.
<p>

<a NAME="native"></a>
<h3>Building the native code version</h3>
<p>
Compilation for your native instruction set results in faster code,
and reduction in memory use. The build process in this case also 
generates optimized versions of the CE, HOT, and socket libraries.
This step compiles all of the Ensemble sources (including
the demos) and will take a while.
<pre>
&nbsp;&nbsp;&nbsp; # make the Ensemble system dependencies
&nbsp;&nbsp;&nbsp; # directory: ensemble
&nbsp;&nbsp;&nbsp; make depend
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # build native code libraries
&nbsp;&nbsp;&nbsp; # directory: ensemble
&nbsp;&nbsp;&nbsp; make opt
</pre>



<a NAME="ejava"></a>
<h3>Building the EJava Interface</h3>
<p>
The EJava interface uses a socket to connect a Java process to a
remote Ensemble server remote, it provides to the application an API
similar to HOT. Ejava was built and tested using Sun Microsystem's
<b>JDK1.2</b>. Things should also work with the newer 1.3 and 1.4
JDKs. Before trying to build this interface, please check and make
sure you have access to JDK1.2. Then follow these steps:

<pre>
&nbsp;&nbsp;&nbsp; # build the EJava interface
&nbsp;&nbsp;&nbsp; # directory: ensemble/ejava
&nbsp;&nbsp;&nbsp; make
</pre>
You can then run one of the demo programs, EnsDemoOutboard or ThreadTest
as follows:
<pre>
&nbsp;&nbsp;&nbsp; java EnsDemoOutboard
</pre>
EnsDemoOutboard is a graphical version of the mtalk demo. It allows
processes to "chat" to each other. The demo application, ThreadTest,
is a test which stresses multi-threading. ThreadTest, requires one
parameter, the number of group members to wait for before beginning
the test.  For example, to run the test with 2 members, start the
test on 2 machines (or 2 consoles) as follows:
<pre>
&nbsp;&nbsp;&nbsp; java ThreadTest 2
</pre>
<p>

<h3>Installation is complete</h3>
<p>
This concludes the instructions for building Ensemble on Unix systems.
<br>

<hr>
<a NAME="multiple-platforms"></a>
<h2>Building Ensemble on Multiple Platforms</h2>
<p>
Multiple versions of Ensemble can co-exist within the same directory
tree.  All platform-dependent files now have a separate directory
describing the platform for which they were compiled. For Unix
platforms, you just need to ensure that the <b>ENS_MACHTYPE</b> and
<b>ENS_OSTYPE</b> environment variables are correctly set. For Windows
the name of the platfrom ('nt') is embedded in the Windows NT
makefiles and does not need to be set. For instance, the
platform-independent bytecode library for Ensemble is called
'libens.cma' ('cma' is the O'Caml suffix used for bytecode
libraryies). The platform-dependent, native code library for Ensemble
on i386, Linux platforms is called
'<b>lib/i386-linux/libens.cmxa</b>' ('cmxa' is the O'Caml suffix for
native code libraries).

<p>
All the demos are install in </b>bin/PLATFORM</b>, this includes the
ML, CE, CEJava, HOT, and Maestro demos. The Ejava demos are built within
there own directories.

<p>
This concludes the instructions for building Ensemble on multiple platforms.
<br>

<h2>"Make Clean" </h2>
<p>
Calling 'make clean' from the top-level directory will erase all
object files in the system, and leave just the libraries and
executables in the <b>lib</b> and <b>bin</b> directories. Calling
'make realclean' will erase these as well. When compiling for multiple
platforms make sure to call 'make clean' between builds. 

<hr>
<h2>SECURITY</h2>
<p>
Ensemble supports several security properties, including user
message encryption, authentication, and group member
authorization. Ensemble requires the user to install <a href =
"http://web.mit.edu/network/pgp.html">PGP6.5</a>  and
<a href ="http://www.openssl.org/">OpenSSL0.9.5a</a>.
Previous version of PGP (2.6.3, 5.0) also work, however, we have
had correctness probelms with them. 
In order to make ensemble with cryptographic support, <b>FIRST, you
must edit mk/config.mk.</b> You will see the CRYPTO_LINK define commented
out by default. Comment out the top (empty) CRYPTO_LINK line and
uncomment the rest of the CRYPTO related lines. On NT, simply uncomment the
lines following the CRYPTO_LINK line. This will now link in the crypto
libraries when you build executables. Now perform the following steps:

Unix:
<pre>
&nbsp;&nbsp;&nbsp; # Make the regular crypto library
&nbsp;&nbsp;&nbsp; # directory: ensemble
&nbsp;&nbsp;&nbsp; make crypto
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # Make the optimized crypto library
&nbsp;&nbsp;&nbsp; # directory: ensemble
&nbsp;&nbsp;&nbsp; make crypto_opt
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # Make the system
&nbsp;&nbsp;&nbsp; # directory: ensemble
&nbsp;&nbsp;&nbsp; make 
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; # Make the optimized version
&nbsp;&nbsp;&nbsp; # directory: ensemble
&nbsp;&nbsp;&nbsp; make opt
</pre>
<b>NOTE:</b> on NT, change "make" to:</pre>
"nmake -f Makefile.nt"
and things should compile smoothly.
<br>
<p>


<h2> Windows not fully supported </h2>
Currently, cryptographic support is not perfect for NT, though we plan
to fully support it in the future. PGP works on both windows and unix,
however, Openssl does not work with Microsoft Visual Studio. Openssl
needs the cygwin libraries, which we do not currently support.

<h2> Testing CRYPTO </h2> In order to check that your system can
use the various cryptographic libraries and interfaces, use the the
armadillo program in the demo directory. 

In order to set up PGP you'll need to use (at least) the following
command:
<pre>
&nbsp;&nbsp;&nbsp; pgp -kg
</pre>
This will generate a public/private key pair for a principal of your
choice. The key-pairs are stored in your home directory under the
subdirectory <i>.pgp</i>. Armadillo requires that the principals
<i>o1,o2</i> are installed. To see the set of principals you currently
use:
<pre>
&nbsp;&nbsp;&nbsp;pgp -kv
&nbsp;&nbsp;&nbsp;pub   512/2F045569 1998/06/15 o2
&nbsp;&nbsp;&nbsp;pub   512/A2358EED 1998/06/15 o1
&nbsp;&nbsp;&nbsp;2 matching keys found.
</pre

use:
<pre>
&nbsp;&nbsp;&nbsp; armadillo -prog pgp 
</pre>
To test the PGP interface. You should see something like:
<pre>
&nbsp;&nbsp;&nbsp;PGP works
&nbsp;&nbsp;&nbsp;check_background
&nbsp;&nbsp;&nbsp;got a ticket
&nbsp;&nbsp;&nbsp;background PGP works
</pre>

On NT, PGP only works in the foreground, in the background due to
socket select issues. 

If something is broken, trace the PGP execution using:
<pre>
&nbsp;&nbsp;&nbsp; armadillo -prog pgp -trace PGP 
</pre>
If more information is required use the flags:
<pre>
&nbsp;&nbsp;&nbsp;-trace PGP1 -trace PGP2
</pre>

For a wider scale test use the <i>exchange</i> program. This is a test
that creates a set of endpoints, with principal names: <i>o1, o2,
..</i>, and merges them securely together into one group. Each group
merge requires that group-leaders properly authenticate themselves
using PGP. The test is started with all members in components containing
themselves, and ends when a single secure component is created. 
Note that it will keep running until reaching the timeout. The timeout
is set by default to 20 seconds. 
To invoke the test do:
<pre>
&nbsp;&nbsp;&nbsp; armadillo -prog exchange -n 2 
</pre>
To use more endpoints, increase the <i>-n</i> command line argument,
and add more principals to your PGP database.

If something goes wrong, a trace of the authentication protocol is
available through <pre> -trace EXCHANGE</pre>. 


To test security with two separate processes do the following:
<pre>
&nbsp;&nbsp;&nbsp;#setup and run gossip
&nbsp;&nbsp;&nbsp;gossip &
&nbsp;&nbsp;&nbsp;#On one machine run:
&nbsp;&nbsp;&nbsp; mtalk -key 11112222333344441111222233334444 -add_prop Auth -pgp o1
&nbsp;&nbsp;&nbsp;#On a second machine run:
&nbsp;&nbsp;&nbsp; mtalk -key 01234567012345670123456701234567 -add_prop Auth -pgp o2
</pre>
The two mtalk processes should authenticate each other and merge.

The three command line arguments specify:
<ul>
  <li> -key 111122223333444111122223333444 : The initial security key of the
      system. Should be a 32 byte string.
  <li> -add_prop Auth: Add the authentication protocol.
      Otherwise, stacks with different keys will not be able to
      merge. 
  <li> -pgp o1: Specify the principal name for the system.
</ul>

<h3> Performance issues with PGP</h3>
The way Ensemble uses PGP is not very efficient at the
moment. However, this only effects authentication, which occurs rarely. 
Common operations such as Diffie-Hellman exchanges, symmetric encrtyption/decryption, and MD5 hashing are performed using the OpenSSL toolkit. 

<a NAME="env_glossary"></a>
<h3> Configuration and environment variables</h3>
Here is a list of environment variables that one needs to set for
Ensemble to compile correctly.

<pre>
# machine and operating-system types. Used for compilation settings.
setenv ENS_MACHTYPE i386
setenv ENS_OSTYPE linux

# where the source distribution of Java is located. Used to compile
# the CEJava and EJava
setenv JAVA_HOME 

# where the outboard executable resides. Used by the hot outboard mode.
setenv ENS_OUTBOARD "/home/orodeh/e/1.20a/ensemble/demo/outboard"

# where the Ensemble configuration file is located
setenv ENS_CONFIG_FILE $HOME/.ensemble
</pre>

<p> There are many configuration options for the system's runtime. They
have all been moved into a configuration-file so as not to cluter the
environment variable system. Below is an example that includes the
default values. Note that the configuration file is optional and the
system will run with the defaults correctly. 

<pre>
# The set of communication transports.
ENS_MODES=DEERING 

# The user-id
ENS_ID=orodeh

# The port number used by the system
ENS_PORT=6789

# The port number of the gossip service
ENS_GOSSIP_PORT=6788

# The set of gossip hosts.
ENS_GOSSIP_HOSTS=localhost

# The set of groupd hosts
ENS_GROUPD_HOSTS=localhost

#the port number of the group-daemon service
ENS_GROUPD_PORT=6790

#The port used for IP-multicast
ENS_DEERING_PORT=6793
</pre>

<p> The additional configuration below is for PGP
<pre>
#The pgp password
ENS_PGP_PASS=Wild Boar

#The pgp version used (2.6,5.0,6.5)
ENS_PGP_VERSION=2.6
</pre>

The format of the configuration file is:
<pre>
# comment line
key = value
# empty lines are also acceptable

</pre>

<br>
<hr>
<br>
</body>
<!-- hhmts start -->
Last modified: Fri Jun  6 11:59:27 JDT 2003
<!-- hhmts end -->
</html>
